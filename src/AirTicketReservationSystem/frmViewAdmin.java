/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AirTicketReservationSystem;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

public class frmViewAdmin extends javax.swing.JInternalFrame {

    Connection dbcon = null;
    
    public frmViewAdmin() {
        initComponents();
        dbcon = dbConnectr.Connect();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrpGender = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        txtDOB = new com.toedter.calendar.JDateChooser();
        lblDOB = new javax.swing.JLabel();
        radioMale = new javax.swing.JRadioButton();
        lblGender = new javax.swing.JLabel();
        radioFemale = new javax.swing.JRadioButton();
        lblContactno = new javax.swing.JLabel();
        txtContactno = new javax.swing.JTextField();
        eiDOB = new javax.swing.JLabel();
        eiGender = new javax.swing.JLabel();
        eiContactno = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        eiEmail = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        profilePic = new javax.swing.JPanel();
        lblProfPic = new javax.swing.JLabel();
        btnAddImage = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txtLname = new javax.swing.JTextField();
        lblLName = new javax.swing.JLabel();
        txtFname = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        lblFName = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        lblNIC = new javax.swing.JLabel();
        txtNIC = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        eiFname = new javax.swing.JLabel();
        eiLname = new javax.swing.JLabel();
        eiNIC = new javax.swing.JLabel();
        eiAddress = new javax.swing.JLabel();
        eiCity = new javax.swing.JLabel();
        lblAdminID = new javax.swing.JLabel();
        lblAdminId = new javax.swing.JLabel();
        eiFname1 = new javax.swing.JLabel();
        btnUpdateAdmin = new javax.swing.JButton();
        lblAdminDetails = new javax.swing.JLabel();
        btnRemoveImage = new javax.swing.JButton();
        btnDeleteAdmin = new javax.swing.JButton();
        btnSaveAdmin = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        txtUsername = new javax.swing.JTextField();
        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        lblAccountInfo = new javax.swing.JLabel();
        lblConpassword = new javax.swing.JLabel();
        eiUsername = new javax.swing.JLabel();
        eiPassword = new javax.swing.JLabel();
        eiConpassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        txtConpassword = new javax.swing.JPasswordField();
        jPanel5 = new javax.swing.JPanel();
        txtSearchAdmin = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        combSearchType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();

        setClosable(true);
        setTitle("View Administrator");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        txtDOB.setToolTipText("");
        txtDOB.setDateFormatString("d-MM-yyyy");

        lblDOB.setText("Date of Birth :");

        btngrpGender.add(radioMale);
        radioMale.setText("Male");
        radioMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioMaleActionPerformed(evt);
            }
        });

        lblGender.setText("Gender :");

        btngrpGender.add(radioFemale);
        radioFemale.setText("Female");
        radioFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioFemaleActionPerformed(evt);
            }
        });

        lblContactno.setText("Contact No :");

        txtContactno.setToolTipText("(eg : 0123456789)");

        eiDOB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/error.png"))); // NOI18N

        eiGender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/error.png"))); // NOI18N

        eiContactno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/error.png"))); // NOI18N

        txtEmail.setToolTipText("(eg : name@example.com)");

        eiEmail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/error.png"))); // NOI18N

        lblEmail.setText("E - mail :");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDOB)
                    .addComponent(lblGender)
                    .addComponent(lblContactno)
                    .addComponent(lblEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtContactno, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eiContactno))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(radioMale)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(radioFemale)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eiGender)
                            .addComponent(eiDOB)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eiEmail)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(lblDOB))
                    .addComponent(eiDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(radioMale)
                        .addComponent(radioFemale)
                        .addComponent(lblGender))
                    .addComponent(eiGender))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblContactno)
                        .addComponent(txtContactno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(eiContactno, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(eiEmail)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblEmail)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        profilePic.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblProfPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/ppicon.png"))); // NOI18N

        javax.swing.GroupLayout profilePicLayout = new javax.swing.GroupLayout(profilePic);
        profilePic.setLayout(profilePicLayout);
        profilePicLayout.setHorizontalGroup(
            profilePicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilePicLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblProfPic, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        profilePicLayout.setVerticalGroup(
            profilePicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilePicLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblProfPic, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAddImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconAddImage.png"))); // NOI18N
        btnAddImage.setText("+");
        btnAddImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddImageActionPerformed(evt);
            }
        });

        txtLname.setToolTipText("(Maximum 20 Characters)");

        lblLName.setText("Last Name :");

        txtFname.setToolTipText("(Maximum 20 Characters)");

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane1.setViewportView(txtAddress);

        lblFName.setText("First Name :");

        lblAddress.setText("Address :");

        lblNIC.setText("NIC No :");

        txtNIC.setToolTipText("(eg : 123456789v)");

        lblCity.setText("City :");

        eiFname.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/error.png"))); // NOI18N

        eiLname.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/error.png"))); // NOI18N

        eiNIC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/error.png"))); // NOI18N

        eiAddress.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/error.png"))); // NOI18N

        eiCity.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/error.png"))); // NOI18N

        lblAdminID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAdminID.setText("Admin ID :");

        lblAdminId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAdminId.setText("No Admin");

        eiFname1.setText("              ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblAdminID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAdminId, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eiFname1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(lblCity)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(lblAddress)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(lblNIC)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtNIC, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(lblLName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(eiCity)
                                    .addComponent(eiAddress)
                                    .addComponent(eiNIC)
                                    .addComponent(eiLname)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblFName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(eiFname)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAdminID)
                        .addComponent(lblAdminId))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(eiFname1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblFName)
                        .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(eiFname, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eiLname, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblLName)
                        .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNIC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNIC))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(eiAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(41, 41, 41)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(eiCity, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblCity))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblAddress)
                                .addGap(83, 83, 83))))
                    .addComponent(eiNIC, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        btnUpdateAdmin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconEditUser24x.png"))); // NOI18N
        btnUpdateAdmin.setText("Update");
        btnUpdateAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateAdminActionPerformed(evt);
            }
        });

        lblAdminDetails.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAdminDetails.setText("Admin Details");

        btnRemoveImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconRemoveImage.png"))); // NOI18N
        btnRemoveImage.setText("-");
        btnRemoveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveImageActionPerformed(evt);
            }
        });

        btnDeleteAdmin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconRemoveUser24x.png"))); // NOI18N
        btnDeleteAdmin.setText("Delete");
        btnDeleteAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAdminActionPerformed(evt);
            }
        });

        btnSaveAdmin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconAddUser24x.png"))); // NOI18N
        btnSaveAdmin.setText("Save");
        btnSaveAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(profilePic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnAddImage, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnRemoveImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnDeleteAdmin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdateAdmin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSaveAdmin)))
                        .addGap(142, 142, 142))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblAdminDetails)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(profilePic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddImage)
                            .addComponent(btnRemoveImage))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdateAdmin)
                            .addComponent(btnDeleteAdmin)
                            .addComponent(btnSaveAdmin))
                        .addGap(29, 29, 29))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAdminDetails)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        lblUsername.setText("Username :");

        lblPassword.setText("Password :");

        lblAccountInfo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAccountInfo.setText("Account info");

        lblConpassword.setText("Confirm Password :");

        eiUsername.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/error.png"))); // NOI18N

        eiPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/error.png"))); // NOI18N

        eiConpassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/error.png"))); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAccountInfo)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblUsername)
                        .addGap(18, 18, 18)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eiUsername)
                        .addGap(33, 33, 33)
                        .addComponent(lblPassword)
                        .addGap(17, 17, 17)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eiPassword)
                        .addGap(35, 35, 35)
                        .addComponent(lblConpassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtConpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eiConpassword)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAccountInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblUsername)
                        .addComponent(lblPassword)
                        .addComponent(lblConpassword)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtConpassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(eiUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eiPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eiConpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Search :");

        combSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin ID", "Username" }));

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconSearch.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel16)
                .addGap(18, 18, 18)
                .addComponent(txtSearchAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(combSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addGap(208, 208, 208))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(btnSearch))
                    .addComponent(combSearchType, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearchAdmin, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 812, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        MDIForm.frmViewAdminActive = true;
        eiUsername.setVisible(false);
        eiPassword.setVisible(false);
        eiConpassword.setVisible(false);
        eiFname.setVisible(false);
        eiLname.setVisible(false);
        eiNIC.setVisible(false);
        eiAddress.setVisible(false);
        eiCity.setVisible(false);
        eiDOB.setVisible(false);
        eiGender.setVisible(false);
        eiEmail.setVisible(false);
        eiContactno.setVisible(false);
        this.defprofimg = this.lblProfPic.getIcon();
        this.btnSaveAdmin.setEnabled(false);
        this.btnUpdateAdmin.setEnabled(false);
        this.btnDeleteAdmin.setEnabled(false);
        this.btnAddImage.setEnabled(false);
        this.btnRemoveImage.setEnabled(false);
        this.txtUsername.setEnabled(false);
        this.txtPassword.setEnabled(false);
        this.txtConpassword.setEnabled(false);
        this.lblUsername.setEnabled(false);
        this.lblPassword.setEnabled(false);
        this.lblConpassword.setEnabled(false);
        this.lblAccountInfo.setEnabled(false);
        this.lblAdminDetails.setEnabled(false);
        this.lblFName.setEnabled(false);
        this.lblLName.setEnabled(false);
        this.lblNIC.setEnabled(false);
        this.lblAddress.setEnabled(false);
        this.lblCity.setEnabled(false);
        this.lblAdminId.setEnabled(false);
        this.lblAdminID.setEnabled(false);
        this.lblDOB.setEnabled(false);
        this.lblGender.setEnabled(false);
        this.lblContactno.setEnabled(false);
        this.lblEmail.setEnabled(false);
        this.txtFname.setEnabled(false);
        this.txtLname.setEnabled(false);
        this.txtNIC.setEnabled(false);
        this.txtAddress.setEnabled(false);
        this.txtCity.setEnabled(false);
        this.txtDOB.setEnabled(false);
        this.radioMale.setEnabled(false);
        this.radioFemale.setEnabled(false);
        this.txtContactno.setEnabled(false);
        this.txtEmail.setEnabled(false);
        this.txtUsername.setEditable(false);
        this.txtPassword.setEditable(false);
        this.txtConpassword.setEditable(false);
        this.txtFname.setEditable(false);
        this.txtLname.setEditable(false);
        this.txtNIC.setEditable(false);
        this.txtAddress.setEditable(false);
        this.txtCity.setEditable(false);
        this.txtContactno.setEditable(false);
        this.txtEmail.setEditable(false);
        
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        MDIForm.frmViewAdminActive = false;
    }//GEN-LAST:event_formInternalFrameClosed

    private void radioMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioMaleActionPerformed

    }//GEN-LAST:event_radioMaleActionPerformed

    private void radioFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioFemaleActionPerformed

    }//GEN-LAST:event_radioFemaleActionPerformed

    private void btnUpdateAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateAdminActionPerformed
        this.btnSaveAdmin.setEnabled(true);
        this.txtDOB.setEnabled(true);
        this.radioFemale.setEnabled(true);
        this.radioMale.setEnabled(true);
        this.txtUsername.setEditable(true);
        this.txtPassword.setEditable(true);
        this.txtConpassword.setEditable(true);
        this.txtFname.setEditable(true);
        this.txtLname.setEditable(true);
        this.txtNIC.setEditable(true);
        this.txtAddress.setEditable(true);
        this.txtCity.setEditable(true);
        this.txtContactno.setEditable(true);
        this.txtEmail.setEditable(true);
        this.btnAddImage.setEnabled(true);
        this.btnRemoveImage.setEnabled(true);
    }//GEN-LAST:event_btnUpdateAdminActionPerformed

    private void btnAddImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddImageActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images","png","jpg");  
        jfc.addChoosableFileFilter(filter);
        jfc.setDialogTitle("Select an image");
        int result = jfc.showOpenDialog(null);
        if(result==JFileChooser.APPROVE_OPTION){
            File imgfile = jfc.getSelectedFile();
            imgpath = imgfile.getAbsolutePath();
            this.lblProfPic.setIcon(getImage(imgpath));
            try{
                File image = new File(imgpath);
                FileInputStream fis = new FileInputStream(image);
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                byte[] buf = new byte[1024];
                for(int readNum; (readNum=fis.read(buf))!=-1;){
                    bos.write(buf,0,readNum);
                }
                prof_img = bos.toByteArray();
            }
            catch(Exception e){
                e.printStackTrace();
            }
        }  
    }//GEN-LAST:event_btnAddImageActionPerformed

    private void btnRemoveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveImageActionPerformed
        prof_img = null;
        this.lblProfPic.setIcon(this.defprofimg);
    }//GEN-LAST:event_btnRemoveImageActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        if(this.txtSearchAdmin.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Empty Search Field","Search Error",JOptionPane.ERROR_MESSAGE);            
        }
        else{
            if(this.combSearchType.getSelectedItem().toString().equals("Admin ID")){
                boolean found=false;
                String foundID="";
                try{
                    String SQL = "select userID from logininfo where accessType='admin' and userID='"+this.txtSearchAdmin.getText()+"'";
                    Statement stmnt = dbcon.createStatement();
                    ResultSet rs = stmnt.executeQuery(SQL);
                    while(rs.next()){
                        if(rs.getString("userID").equals(this.txtSearchAdmin.getText())){
                            found=true;
                            foundID=rs.getString("userID");
                        }
                    }
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Database communication error","Database Error",JOptionPane.ERROR_MESSAGE);  
                }
                //--------------------------------------------------------------------------------------
                if(found){
                    JOptionPane.showMessageDialog(null, "Match found","Search Success",JOptionPane.INFORMATION_MESSAGE);
                    getAdminDetails_AdminID(this.txtSearchAdmin.getText());
                    this.btnSaveAdmin.setEnabled(false);
                    this.btnUpdateAdmin.setEnabled(true);
                    this.btnAddImage.setEnabled(false);
                    this.btnRemoveImage.setEnabled(false);
                    this.txtUsername.setEnabled(true);
                    this.txtPassword.setEnabled(true);
                    this.txtConpassword.setEnabled(true);
                    this.lblUsername.setEnabled(true);
                    this.lblPassword.setEnabled(true);
                    this.lblConpassword.setEnabled(true);
                    this.lblAccountInfo.setEnabled(true);
                    this.lblAdminDetails.setEnabled(true);
                    this.lblFName.setEnabled(true);
                    this.lblLName.setEnabled(true);
                    this.lblNIC.setEnabled(true);
                    this.lblAddress.setEnabled(true);
                    this.lblCity.setEnabled(true);
                    this.lblAdminId.setEnabled(true);
                    this.lblAdminID.setEnabled(true);
                    this.lblDOB.setEnabled(true);
                    this.lblGender.setEnabled(true);
                    this.lblContactno.setEnabled(true);
                    this.lblEmail.setEnabled(true);
                    this.txtFname.setEnabled(true);
                    this.txtLname.setEnabled(true);
                    this.txtNIC.setEnabled(true);
                    this.txtAddress.setEnabled(true);
                    this.txtCity.setEnabled(true);
                    this.txtDOB.setEnabled(false);
                    this.radioMale.setEnabled(false);
                    this.radioFemale.setEnabled(false);
                    this.txtContactno.setEnabled(true);
                    this.txtEmail.setEnabled(true);
                    username=this.txtUsername.getText();
                    this.btnDeleteAdmin.setEnabled(true);
                    btnDelVisibility(foundID);
                }
                else{
                    JOptionPane.showMessageDialog(null, "No match found","Search Error",JOptionPane.ERROR_MESSAGE);
                }
            }
            else if(this.combSearchType.getSelectedItem().toString().equals("Username")){
                boolean found=false;
                String userId="";
                try{
                    String SQL = "select userID,userName from logininfo where userName='"+this.txtSearchAdmin.getText()+"'";
                    Statement stmnt = dbcon.createStatement();
                    ResultSet rs = stmnt.executeQuery(SQL);
                    while(rs.next()){
                        if(rs.getString("userName").equals(this.txtSearchAdmin.getText())){
                            userId=rs.getString("userID");
                            found=true;
                        }
                    }
                }
                catch(Exception e){
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database communication error","Database Error",JOptionPane.ERROR_MESSAGE);  
                }
                //--------------------------------------------------------------------------------------
                if(found){
                    JOptionPane.showMessageDialog(null, "Match found","Search Success",JOptionPane.INFORMATION_MESSAGE);
                    getAdminDetails_AdminID(userId);
                    this.btnSaveAdmin.setEnabled(false);
                    this.btnUpdateAdmin.setEnabled(true);
                    this.btnDeleteAdmin.setEnabled(true);
                    this.btnAddImage.setEnabled(false);
                    this.btnRemoveImage.setEnabled(false);
                    this.txtUsername.setEnabled(true);
                    this.txtPassword.setEnabled(true);
                    this.txtConpassword.setEnabled(true);
                    this.lblUsername.setEnabled(true);
                    this.lblPassword.setEnabled(true);
                    this.lblConpassword.setEnabled(true);
                    this.lblAccountInfo.setEnabled(true);
                    this.lblAdminDetails.setEnabled(true);
                    this.lblFName.setEnabled(true);
                    this.lblLName.setEnabled(true);
                    this.lblNIC.setEnabled(true);
                    this.lblAddress.setEnabled(true);
                    this.lblCity.setEnabled(true);
                    this.lblAdminId.setEnabled(true);
                    this.lblAdminID.setEnabled(true);
                    this.lblDOB.setEnabled(true);
                    this.lblGender.setEnabled(true);
                    this.lblContactno.setEnabled(true);
                    this.lblEmail.setEnabled(true);
                    this.txtFname.setEnabled(true);
                    this.txtLname.setEnabled(true);
                    this.txtNIC.setEnabled(true);
                    this.txtAddress.setEnabled(true);
                    this.txtCity.setEnabled(true);
                    this.txtDOB.setEnabled(false);
                    this.radioMale.setEnabled(false);
                    this.radioFemale.setEnabled(false);
                    this.txtContactno.setEnabled(true);
                    this.txtEmail.setEnabled(true);
                    username=this.txtUsername.getText();
                    btnDelVisibility(userId);
                }
                else{
                    JOptionPane.showMessageDialog(null, "No match found","Search Error",JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnSaveAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAdminActionPerformed
        if(checkEntryDetails()){
            int userChoice = JOptionPane.showConfirmDialog(null,"Are you sure details are correct?", "Confirm Details", JOptionPane.YES_NO_OPTION);
            
            if(userChoice==0){
                String update_userinfo_SQL = "update userinfo set fname=?,lname=?,address=?,gender=?,dob=?,nic=?,city=?,email=?,contact=?,profimg=? where userID=?";
                String update_logininfo_SQL = "update logininfo set userName=?, password=? where userID=?";
                try{
                    PreparedStatement pst = dbcon.prepareStatement(update_logininfo_SQL);
                    PreparedStatement pst2 = dbcon.prepareStatement(update_userinfo_SQL);
                    pst.setString(1, this.txtUsername.getText());
                    pst.setString(2, this.txtPassword.getText());
                    pst.setString(3, this.lblAdminId.getText());
                    
                    pst2.setString(1, this.txtFname.getText());
                    pst2.setString(2, this.txtLname.getText());
                    pst2.setString(3, this.txtAddress.getText());
                    pst2.setString(4, this.btngrpGender.getSelection().getActionCommand());
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                    String dob = df.format(txtDOB.getDate());
                    pst2.setString(5, dob);
                    pst2.setString(6, this.txtNIC.getText());
                    pst2.setString(7, this.txtCity.getText());
                    pst2.setString(8, this.txtEmail.getText());
                    pst2.setString(9, this.txtContactno.getText());
                    pst2.setBytes(10, prof_img);
                    pst2.setString(11, this.lblAdminId.getText());
                    pst.execute();
                    pst2.execute();
                    JOptionPane.showMessageDialog(null, "Details of "+this.lblAdminId.getText()+" was successfully updated.", "Updating Admin Complete", JOptionPane.INFORMATION_MESSAGE);
                    this.txtUsername.setEditable(false);
                    this.txtPassword.setEditable(false);
                    this.txtConpassword.setEditable(false);
                    this.txtFname.setEditable(false);
                    this.txtLname.setEditable(false);
                    this.txtNIC.setEditable(false);
                    this.txtAddress.setEditable(false);
                    this.txtCity.setEditable(false);
                    this.txtContactno.setEditable(false);
                    this.txtEmail.setEditable(false);
                    if(this.radioFemale.isSelected()){
                        this.radioFemale.setEnabled(true);
                        this.radioMale.setEnabled(false);
                    }
                    else{
                        this.radioFemale.setEnabled(false);
                        this.radioMale.setEnabled(true);
                    }
                    this.txtDOB.setEnabled(false);
                    this.btnAddImage.setEnabled(false);
                    this.btnRemoveImage.setEnabled(false);
                    this.btnSaveAdmin.setEnabled(false);
                }
                catch(Exception exc){
                    JOptionPane.showMessageDialog(null, "Database connection failed while saving information","Database Connection Error",JOptionPane.ERROR_MESSAGE);
                    
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Fill all the details correctly", "Updating Details Failed!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveAdminActionPerformed

    private void btnDeleteAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAdminActionPerformed
        int userChoice = JOptionPane.showConfirmDialog(null,"Are you sure to delete this account?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        
        if(userChoice==0){
            String SQL = "delete from userinfo where userID='"+this.lblAdminId.getText()+"'";
            String SQL2 = "delete from logininfo where userID='"+this.lblAdminId.getText()+"'";
            try{
                Statement stmnt = dbcon.createStatement();
                Statement stmnt2 = dbcon.createStatement();
                stmnt.executeUpdate(SQL);
                stmnt2.executeUpdate(SQL2);
                JOptionPane.showMessageDialog(null, "Account "+this.lblAdminId.getText()+" deleted successfully", "Delete Successful!", JOptionPane.INFORMATION_MESSAGE);
                //-----------------
                    this.setClosed(true);
                    frmViewAdmin frmadmin = new frmViewAdmin();
                    MDIForm.DesktopPane.add(frmadmin);
                    int height = MDIForm.DesktopPane.getHeight();
                    int width = MDIForm.DesktopPane.getWidth();
                    int x = (int)(height-frmadmin.getHeight())/2;
                    int y = (int)(width-frmadmin.getWidth())/2;
                    frmadmin.setLocation(y,x);
                    frmadmin.setVisible(true);
                //-----------------
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Cannot Delete Account", "Database Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDeleteAdminActionPerformed
 
    public ImageIcon getImage(String path){
        ImageIcon ProfImg = new ImageIcon(path);
        Image img = ProfImg.getImage();
        Image newImg = img.getScaledInstance(lblProfPic.getWidth(), lblProfPic.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon finalImage = new ImageIcon(newImg);
        return finalImage;
    }
    
    public boolean cktxtFname(){
        if(txtFname.getText().equals("")){
            eiFname.setVisible(true);
            eiFname.setToolTipText("Empty Field!");
            return false;
        }
        else{
            if(txtFname.getText().length()>20){
                eiFname.setVisible(true);
                eiFname.setToolTipText("Maximum characters exceed!");
                return false;
            }
            else{
                eiFname.setVisible(false);
                return true;
            }
        }
    }
    
    public boolean cktxtLname(){
        if(txtLname.getText().equals("")){
            eiLname.setVisible(true);
            eiLname.setToolTipText("Empty Field!");
            return false;
        }
        else{
            if(txtLname.getText().length()>20){
                eiLname.setVisible(true);
                eiLname.setToolTipText("Maximum characters exceed!");
                return false;
            }
            else{
                eiLname.setVisible(false);
                return true;
            }
        }
    }
    
    public boolean cktxtNIC(){
                
        if(txtNIC.getText().equals("")){
            eiNIC.setVisible(true);
            eiNIC.setToolTipText("Empty Field!");
            return false;
        }
        else{
            if(txtNIC.getText().length()==10){
                String NIC = txtNIC.getText();
                if(Character.isDigit(NIC.charAt(0))==false){
                    eiNIC.setVisible(true);
                    eiNIC.setToolTipText("Invalid NIC!");
                    return false;
                }
                else if(Character.isDigit(NIC.charAt(1))==false){
                    eiNIC.setVisible(true);
                    eiNIC.setToolTipText("Invalid NIC!");
                    return false;
                }
                else if(Character.isDigit(NIC.charAt(2))==false){
                    eiNIC.setVisible(true);
                    eiNIC.setToolTipText("Invalid NIC!");
                    return false;
                }
                else if(Character.isDigit(NIC.charAt(3))==false){
                    eiNIC.setVisible(true);
                    eiNIC.setToolTipText("Invalid NIC!");
                    return false;
                }
                else if(Character.isDigit(NIC.charAt(4))==false){
                    eiNIC.setVisible(true);
                    eiNIC.setToolTipText("Invalid NIC!");
                    return false;
                }
                else if(Character.isDigit(NIC.charAt(5))==false){
                    eiNIC.setVisible(true);
                    eiNIC.setToolTipText("Invalid NIC!");
                    return false;
                }
                else if(Character.isDigit(NIC.charAt(6))==false){
                    eiNIC.setVisible(true);
                    eiNIC.setToolTipText("Invalid NIC!");
                    return false;
                }
                else if(Character.isDigit(NIC.charAt(7))==false){
                    eiNIC.setVisible(true);
                    eiNIC.setToolTipText("Invalid NIC!");
                    return false;
                }
                else if(Character.isDigit(NIC.charAt(8))==false){
                    eiNIC.setVisible(true);
                    eiNIC.setToolTipText("Invalid NIC!");
                    return false;
                }
                else if(NIC.charAt(9)=='v' || NIC.charAt(9)=='V'){
                    boolean nicavailable=false;
                    String useridofnic="";
                    String SQL = "select userID, nic from userinfo";
                    try{
                        Statement stmnt = dbcon.createStatement();
                        ResultSet rs = stmnt.executeQuery(SQL);
                        
                        while(rs.next()){
                            if(rs.getString("nic").equalsIgnoreCase(NIC)){
                                nicavailable=true;
                                useridofnic = rs.getString("userID");
                                break;
                            }
                        }
                    }
                    catch(Exception e){
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Communicating with database failed", "Check NIC Failed!", JOptionPane.ERROR_MESSAGE);

                    }
                    if(nicavailable==true && useridofnic.equals(this.lblAdminId.getText())){
                        eiNIC.setVisible(false);
                        return true;
                    }
                    else if(nicavailable==true && useridofnic.equals(this.lblAdminId.getText())==false){
                        eiNIC.setVisible(true);
                        eiNIC.setToolTipText("This NIC already exists!");
                        return false;
                    }
                    else if(nicavailable==false){
                        eiNIC.setVisible(false);
                        return true;
                    }
                    else{
                        eiNIC.setVisible(true);
                        eiNIC.setToolTipText("This NIC already exists!");
                        return false;
                    }
                }
                else{
                    eiNIC.setVisible(true);
                    eiNIC.setToolTipText("Invalid NIC!");
                    return false;
                }
            }
            else{
                eiNIC.setVisible(true);
                eiNIC.setToolTipText("Invalid NIC!");
                return false;
            }
        }
    }
    
    public boolean cktxtAddress(){
        if(txtAddress.getText().equals("")){
            eiAddress.setVisible(true);
            eiAddress.setToolTipText("Empty Field!");
            return false;
        }
        else{
            if(txtAddress.getText().length()>100){
                eiAddress.setVisible(true);
                eiAddress.setToolTipText("Maximum characters exceed!");
                return false;
            }
            else{
                eiAddress.setVisible(false);
                return true;
            }
        }
    }
    
    public boolean cktxtCity(){
        if(txtCity.getText().equals("")){
            eiCity.setVisible(true);
            eiCity.setToolTipText("Empty Field!");
            return false;
        }
        else{
            if(txtCity.getText().length()>15){
                eiCity.setVisible(true);
                eiCity.setToolTipText("Maximum characters exceed!");
                return false;
            }
            else{
                eiCity.setVisible(false);
                return true;
            }
        }
    }
    
    public boolean ckGender(){
        if(this.radioMale.isSelected()){
            this.radioMale.setActionCommand("Male");
            eiGender.setVisible(false);
            return true;
        }
        else if(this.radioFemale.isSelected()){
            this.radioFemale.setActionCommand("Female");
            eiGender.setVisible(false);
            return true;
        }
        else{
            eiGender.setVisible(true);
            eiGender.setToolTipText("Not Selected!");
            return false;
        }
    }
    
    public boolean cktxtEmail(){
        
        int countAt=0;
        
        if(txtEmail.getText().equals("")){
            eiEmail.setVisible(true);
            eiEmail.setToolTipText("Empty Field!");
            return false;
        }
        else{
            if(txtEmail.getText().length()>50){
                eiEmail.setVisible(true);
                eiEmail.setToolTipText("Maximum characters exceed!");
                return false;
            }
            else{
                for(int x=0; x<txtEmail.getText().length();x++){
                    if(txtEmail.getText().charAt(x)=='@'){
                        countAt++;
                    }
                }
                if(countAt==1){
                    if(txtEmail.getText().endsWith("@")){
                        eiEmail.setVisible(true);
                        eiEmail.setToolTipText("Invalid email address!");
                        return false;
                    }
                    else{
                        eiEmail.setVisible(false);
                        return true;
                    }
                }
                else{
                    eiEmail.setVisible(true);
                    eiEmail.setToolTipText("Invalid email address!");
                    return false;
                }
            }
        }
    }
    
    public boolean cktxtContactno(){
        if(txtContactno.getText().equals("")){
            eiContactno.setVisible(true);
            eiContactno.setToolTipText("Empty Field!");
            return false;
        }
        else{
            if(txtContactno.getText().length()==10){
                if(txtContactno.getText().startsWith("0")==false){
                    eiContactno.setVisible(true);
                    eiContactno.setToolTipText("Invalid contact number!");
                    return false;
                }
                else if(Character.isDigit(txtContactno.getText().charAt(1))==false){
                    eiContactno.setVisible(true);
                    eiContactno.setToolTipText("Invalid contact number!");
                    return false;
                }
                else if(Character.isDigit(txtContactno.getText().charAt(2))==false){
                    eiContactno.setVisible(true);
                    eiContactno.setToolTipText("Invalid contact number!");
                    return false;
                }
                else if(Character.isDigit(txtContactno.getText().charAt(3))==false){
                    eiContactno.setVisible(true);
                    eiContactno.setToolTipText("Invalid contact number!");
                    return false;
                }
                else if(Character.isDigit(txtContactno.getText().charAt(4))==false){
                    eiContactno.setVisible(true);
                    eiContactno.setToolTipText("Invalid contact number!");
                    return false;
                }
                else if(Character.isDigit(txtContactno.getText().charAt(5))==false){
                    eiContactno.setVisible(true);
                    eiContactno.setToolTipText("Invalid contact number!");
                    return false;
                }
                else if(Character.isDigit(txtContactno.getText().charAt(6))==false){
                    eiContactno.setVisible(true);
                    eiContactno.setToolTipText("Invalid contact number!");
                    return false;
                }
                else if(Character.isDigit(txtContactno.getText().charAt(7))==false){
                    eiContactno.setVisible(true);
                    eiContactno.setToolTipText("Invalid contact number!");
                    return false;
                }
                else if(Character.isDigit(txtContactno.getText().charAt(8))==false){
                    eiContactno.setVisible(true);
                    eiContactno.setToolTipText("Invalid contact number!");
                    return false;
                }
                else if(Character.isDigit(txtContactno.getText().charAt(9))==false){
                    eiContactno.setVisible(true);
                    eiContactno.setToolTipText("Invalid contact number!");
                    return false;
                }
                else{
                    eiContactno.setVisible(false);
                    return true;
                }
            }
            else{
                eiContactno.setVisible(true);
                eiContactno.setToolTipText("Invalid contact number!");
                return false;
            }
        }
    }
    
    public boolean cktxtDOB(){
        try{
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            String date = df.format(txtDOB.getDate());
            if(date.equals("")){
                eiDOB.setVisible(true);
                eiDOB.setToolTipText("Not Selected");
                return false;
            }
            else{
                eiDOB.setVisible(false);
                return true;
            }
        }
        catch(Exception exc){
            eiDOB.setVisible(true);
            eiDOB.setToolTipText("Invalid Date of Birth");
            return false;
        }
    }
    
    public boolean cktxtUsername(){
        if(txtUsername.getText().equals("")){
            eiUsername.setVisible(true);
            eiUsername.setToolTipText("Empty Field!");
            return false;
        }
        else{
            if(txtUsername.getText().length()>15){
                eiUsername.setVisible(true);
                eiUsername.setToolTipText("Maximum characters exceed!");
                return false;
            }
            else{
                boolean exist=false;
                String userID="";
                try{
                    String SQL = "select userID, userName from logininfo";
                    Statement stmnt = dbcon.createStatement();
                    ResultSet rs = stmnt.executeQuery(SQL);

                    while(rs.next()){
                        if(rs.getString("userName").equalsIgnoreCase(this.txtUsername.getText())){
                            exist = true;
                            userID = rs.getString("userID");
                            break;
                        }
                    }
                }
                catch(Exception exc){
                    JOptionPane.showMessageDialog(null, "Database Connection Failed!", "Connection Fails",JOptionPane.ERROR_MESSAGE);
                }

                if(exist && userID.equals(this.lblAdminId.getText())){
                    eiUsername.setVisible(false);
                    return true;
                }
                else if(exist && userID.equals(this.lblAdminId.getText())==false){
                    eiUsername.setVisible(true);
                    eiUsername.setToolTipText("Username exist!");
                    return false;
                }
                else{
                    eiUsername.setVisible(false);
                    return true;
                }
            }
            
        }
    }
    
    public boolean cktxtProfImg(){
        if(prof_img==null){
            try{
                Icon icon = this.lblProfPic.getIcon();
                BufferedImage img = new BufferedImage(icon.getIconWidth(),icon.getIconHeight(),BufferedImage.TYPE_INT_ARGB);
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                ImageIO.write(img, "png", bos);
                prof_img = bos.toByteArray();
            }
            catch(Exception e){
                e.printStackTrace();
            }
            return true;
        }
        else{
            return true;
        }
    }
    
    public boolean cktxtConpassword(){
        if(txtConpassword.getText().equals("")){
            eiConpassword.setVisible(true);
            eiConpassword.setToolTipText("Empty Field!");
            return false;
        }
        else{
            if(txtPassword.getText().equals(txtConpassword.getText())){
                eiConpassword.setVisible(false);
                return true;
            }
            else{
                eiConpassword.setVisible(true);
                eiConpassword.setToolTipText("Passwords does not match!");
                return false;
            }
        }
    }
    
    public boolean cktxtPassword(){
        if(txtPassword.getText().equals("")){
            eiPassword.setVisible(true);
            eiPassword.setToolTipText("Empty Field!");
            return false;
        }
        else{
            if(txtPassword.getText().length()>15){
                eiPassword.setVisible(true);
                eiPassword.setToolTipText("Maximum characters exceed!");
                return false;
            }
            else{
                eiPassword.setVisible(false);
                return true;
            }
        }
    }
    
    public boolean ckExistinguname(){
        boolean exist=false;
        String userID="";
        try{
            
            String SQL = "select userID, userName from logininfo";
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            
            while(rs.next()){
                if(rs.getString("userName").equals(txtUsername.getText())){
                    exist = true;
                    userID = rs.getString("userID");
                    break;
                }
            }
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(null, "Database Connection Failed!", "Connection Fails",JOptionPane.ERROR_MESSAGE);
        }
        
        if(exist && userID==this.lblAdminId.getText()){
            System.out.println("ckExistinguname true");
            return true;
        }
        else{
            return false;
        }
    }
    
    public boolean checkEntryDetails(){
        
        if(cktxtUsername() & cktxtPassword() & cktxtConpassword() & cktxtFname() & cktxtLname() & cktxtNIC() & cktxtAddress() & cktxtCity() &cktxtDOB() & ckGender() & cktxtEmail() & cktxtContactno()){
            return true;
        }
        else{
            return false;
        }
    }
    
    public void getAdminDetails_AdminID(String recipid){
        //Enable items
        this.txtFname.setEnabled(true);
        this.txtLname.setEnabled(true);
        this.txtNIC.setEnabled(true);
        this.txtAddress.setEnabled(true);
        this.txtCity.setEnabled(true);
        this.txtDOB.setEnabled(false);
        this.txtContactno.setEnabled(true);
        this.txtEmail.setEnabled(true);
        this.btnAddImage.setEnabled(false);
        this.btnRemoveImage.setEnabled(false);
        this.btnDeleteAdmin.setEnabled(true);
        this.btnUpdateAdmin.setEnabled(true);
        this.btnSaveAdmin.setEnabled(false);
        this.radioFemale.setEnabled(false);
        this.radioMale.setEnabled(false);
        //------------------------------------------------------
        this.lblAdminId.setText(recipid);
        
        try{
            String SQL = "select * from userinfo where userID = ?"; 
            String SQL2 = "select * from userinfo u ,logininfo l where u.userID=l.userID and l.userID = ?"; 
            PreparedStatement pst = dbcon.prepareStatement(SQL2);
            pst.setString(1, recipid);
            ResultSet rs = pst.executeQuery();
            while(rs.next()){
                this.txtUsername.setText(rs.getString("userName"));
                this.txtPassword.setText(rs.getString("password"));
                this.txtConpassword.setText(rs.getString("password"));
                this.txtFname.setText(rs.getString("fname"));
                this.txtLname.setText(rs.getString("lname"));
                this.txtNIC.setText(rs.getString("nic"));
                this.txtAddress.setText(rs.getString("address"));
                this.txtCity.setText(rs.getString("city"));
                this.txtContactno.setText(rs.getString("contact"));
                this.txtEmail.setText(rs.getString("email"));
                if(rs.getString("gender").equals("Male")){
                    this.radioMale.setEnabled(true);
                    this.radioMale.setSelected(true);
                }
                else{
                    this.radioFemale.setSelected(true);
                    this.radioFemale.setEnabled(true);
                }
                //setdate
                String datevalue = rs.getString("dob");
                try{
                    Date date = new SimpleDateFormat("yyyy-MM-dd").parse(datevalue);
                    this.txtDOB.setDate(date);
                }
                catch(Exception e){
                    e.printStackTrace();
                }
                //end setdate
                //set profpic
                if(rs.getBytes("profimg")!=null){
                    byte[] imagedata = rs.getBytes("profimg");
                    this.prof_img = rs.getBytes("profimg"); // current database profile image
                    ImageIcon img = new ImageIcon(imagedata);
                    Image resizedimage = img.getImage().getScaledInstance(lblProfPic.getWidth(), lblProfPic.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon finalImage = new ImageIcon(resizedimage);
                    this.lblProfPic.setIcon(finalImage);
                }
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
    
    public void btnDelVisibility(String userID){
        if(MDIForm.loggedUserID.equals(userID)){
            this.btnDeleteAdmin.setEnabled(false);
        }
        else{
            this.btnDeleteAdmin.setEnabled(true);
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddImage;
    private javax.swing.JButton btnDeleteAdmin;
    private javax.swing.JButton btnRemoveImage;
    private javax.swing.JButton btnSaveAdmin;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdateAdmin;
    private javax.swing.ButtonGroup btngrpGender;
    private javax.swing.JComboBox<String> combSearchType;
    private javax.swing.JLabel eiAddress;
    private javax.swing.JLabel eiCity;
    private javax.swing.JLabel eiConpassword;
    private javax.swing.JLabel eiContactno;
    private javax.swing.JLabel eiDOB;
    private javax.swing.JLabel eiEmail;
    private javax.swing.JLabel eiFname;
    private javax.swing.JLabel eiFname1;
    private javax.swing.JLabel eiGender;
    private javax.swing.JLabel eiLname;
    private javax.swing.JLabel eiNIC;
    private javax.swing.JLabel eiPassword;
    private javax.swing.JLabel eiUsername;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAccountInfo;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAdminDetails;
    private javax.swing.JLabel lblAdminID;
    private javax.swing.JLabel lblAdminId;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblConpassword;
    private javax.swing.JLabel lblContactno;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFName;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblLName;
    private javax.swing.JLabel lblNIC;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblProfPic;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JPanel profilePic;
    private javax.swing.JRadioButton radioFemale;
    private javax.swing.JRadioButton radioMale;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtCity;
    private javax.swing.JPasswordField txtConpassword;
    private javax.swing.JTextField txtContactno;
    private com.toedter.calendar.JDateChooser txtDOB;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFname;
    private javax.swing.JTextField txtLname;
    private javax.swing.JTextField txtNIC;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtSearchAdmin;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
    String username;
    String imgpath = null;
    byte[] prof_img = null;
    Icon defprofimg;
}
