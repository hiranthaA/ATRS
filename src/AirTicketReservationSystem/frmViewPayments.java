/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AirTicketReservationSystem;

import java.sql.*;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.proteanit.sql.DbUtils;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;


public class frmViewPayments extends javax.swing.JInternalFrame {

    Connection dbcon=null;

    public frmViewPayments() {
        initComponents();
        dbcon = dbConnectr.Connect();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        combSearchType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPayments = new javax.swing.JTable();
        btnPrintDetails = new javax.swing.JButton();

        setClosable(true);
        setTitle("View Payments");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setText("Search :");

        txtSearch.setToolTipText("(eg: Ticket ID - T0001, Custome ID - C0001)");

        combSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Payment ID", "Payment Date", "Ticket ID", "Customer ID", "Flight ID" }));

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconSearch.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(combSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearch)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(btnSearch)))
                    .addComponent(combSearchType))
                .addContainerGap())
        );

        tblPayments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPayments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPaymentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPayments);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnPrintDetails.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconPrint.png"))); // NOI18N
        btnPrintDetails.setText("Print Details");
        btnPrintDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(198, 198, 198))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPrintDetails)
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPrintDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void getPaymentInfo() {
        if (this.combSearchType.getSelectedItem().toString().equals("All")) {
            String SQL = "select p.paymentID as 'Payment ID', p.method as 'Payment Method', p.payAmnt as 'Amount', p.date as 'Payment Date', t.ticketID as 'Ticket ID', t.custID as 'Customer ID', t.flightID as 'Flight ID' from payment_info p left outer join creditcard_info c on p.paymentID=c.paymentID, ticket_info t where t.paymentID=p.paymentID";
            try {
                Statement stmnt = dbcon.createStatement();
                ResultSet rs = stmnt.executeQuery(SQL);
                this.tblPayments.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Cannot retrieve payment data", "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (this.txtSearch.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Empty Search Field", "Search Error", JOptionPane.ERROR_MESSAGE);
        } else if (this.combSearchType.getSelectedItem().toString().equals("Payment ID")) {
            String SQL = "select p.paymentID as 'Payment ID', p.method as 'Payment Method', p.payAmnt as 'Amount', p.date as 'Payment Date', t.ticketID as 'Ticket ID', t.custID as 'Customer ID', t.flightID as 'Flight ID' from payment_info p left outer join creditcard_info c on p.paymentID=c.paymentID, ticket_info t where t.paymentID=p.paymentID and p.paymentID='" + this.txtSearch.getText() + "'";
            try {
                Statement stmnt = dbcon.createStatement();
                ResultSet rs = stmnt.executeQuery(SQL);
                this.tblPayments.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Cannot retrieve payment data", "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (this.combSearchType.getSelectedItem().toString().equals("Ticket ID")) {
            String SQL = "select p.paymentID as 'Payment ID', p.method as 'Payment Method', p.payAmnt as 'Amount', p.date as 'Payment Date', t.ticketID as 'Ticket ID', t.custID as 'Customer ID', t.flightID as 'Flight ID' from payment_info p left outer join creditcard_info c on p.paymentID=c.paymentID, ticket_info t where t.paymentID=p.paymentID and t.ticketID='" + this.txtSearch.getText() + "'";
            try {
                Statement stmnt = dbcon.createStatement();
                ResultSet rs = stmnt.executeQuery(SQL);
                this.tblPayments.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Cannot retrieve payment data", "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (this.combSearchType.getSelectedItem().toString().equals("Flight ID")) {
            String SQL = "select p.paymentID as 'Payment ID', p.method as 'Payment Method', p.payAmnt as 'Amount', p.date as 'Payment Date', t.ticketID as 'Ticket ID', t.custID as 'Customer ID', t.flightID as 'Flight ID' from payment_info p left outer join creditcard_info c on p.paymentID=c.paymentID, ticket_info t where t.paymentID=p.paymentID and t.FlightID='" + this.txtSearch.getText() + "'";
            try {
                Statement stmnt = dbcon.createStatement();
                ResultSet rs = stmnt.executeQuery(SQL);
                this.tblPayments.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Cannot retrieve flight data", "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (this.combSearchType.getSelectedItem().toString().equals("Customer ID")) {
            String SQL = "select p.paymentID as 'Payment ID', p.method as 'Payment Method', p.payAmnt as 'Amount', p.date as 'Payment Date', t.ticketID as 'Ticket ID', t.custID as 'Customer ID', t.flightID as 'Flight ID' from payment_info p left outer join creditcard_info c on p.paymentID=c.paymentID, ticket_info t where t.paymentID=p.paymentID and t.custID='" + this.txtSearch.getText() + "'";
            try {
                Statement stmnt = dbcon.createStatement();
                ResultSet rs = stmnt.executeQuery(SQL);
                this.tblPayments.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Cannot retrieve payment data", "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (this.combSearchType.getSelectedItem().toString().equals("Payment Date")) {
            String SQL = "select p.paymentID as 'Payment ID', p.method as 'Payment Method', p.payAmnt as 'Amount', p.date as 'Payment Date', t.ticketID as 'Ticket ID', t.custID as 'Customer ID', t.flightID as 'Flight ID' from payment_info p left outer join creditcard_info c on p.paymentID=c.paymentID, ticket_info t where t.paymentID=p.paymentID and p.date='" + this.txtSearch.getText() + "'";
            try {
                Statement stmnt = dbcon.createStatement();
                ResultSet rs = stmnt.executeQuery(SQL);
                this.tblPayments.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Cannot retrieve payment data", "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        MDIForm.frmViewPaymentsActive = true;
        String SQL = "select p.paymentID as 'Payment ID', p.method as 'Payment Method', p.payAmnt as 'Amount', p.date as 'Payment Date', t.ticketID as 'Ticket ID', t.custID as 'Customer ID', t.flightID as 'Flight ID' from payment_info p left outer join creditcard_info c on p.paymentID=c.paymentID, ticket_info t where t.paymentID=p.paymentID";
        try {
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            this.tblPayments.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Cannot retrieve payment data", "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        MDIForm.frmViewPaymentsActive = false;
    }//GEN-LAST:event_formInternalFrameClosing

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        getPaymentInfo();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tblPaymentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPaymentsMouseClicked

    }//GEN-LAST:event_tblPaymentsMouseClicked

    private void btnPrintDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintDetailsActionPerformed
        
        if(this.combSearchType.getSelectedItem().toString().equals("All")){
                  try{
                      String report = "reports\\paymentReport_All.jrxml";
                      JasperReport jr = JasperCompileManager.compileReport(report);
                      JasperPrint jp = JasperFillManager.fillReport(jr,null,dbcon);
                      JasperViewer.viewReport(jp,false);
                  }
                  catch(Exception e){
                      e.printStackTrace();
                  }
        }
        else if(this.combSearchType.getSelectedItem().toString().equals("Payment ID")){
                try {
                    JasperDesign jd = JRXmlLoader.load("reports\\paymentReport_All.jrxml");
                    String sql = "select p.paymentID as 'Payment ID', p.method as 'Payment Method', p.payAmnt as 'Amount', p.date as 'Payment Date', t.ticketID as 'Ticket ID', t.custID as 'Customer ID', t.flightID as 'Flight ID' from payment_info p left outer join creditcard_info c on p.paymentID=c.paymentID, ticket_info t where t.paymentID=p.paymentID and p.paymentID='" + this.txtSearch.getText() + "'";
                    JRDesignQuery newQuery = new JRDesignQuery();
                    newQuery.setText(sql);
                    jd.setQuery(newQuery);
                    JasperReport jr = JasperCompileManager.compileReport(jd);
                    JasperPrint jp = JasperFillManager.fillReport(jr, null,dbcon);
                    JasperViewer.viewReport(jp,false);

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
        }
        else if(this.combSearchType.getSelectedItem().toString().equals("Ticket ID")){
                try {
                    JasperDesign jd = JRXmlLoader.load("reports\\paymentReport_All.jrxml");
                    String sql = "select p.paymentID as 'Payment ID', p.method as 'Payment Method', p.payAmnt as 'Amount', p.date as 'Payment Date', t.ticketID as 'Ticket ID', t.custID as 'Customer ID', t.flightID as 'Flight ID' from payment_info p left outer join creditcard_info c on p.paymentID=c.paymentID, ticket_info t where t.paymentID=p.paymentID and t.ticketID='" + this.txtSearch.getText() + "'";
                    JRDesignQuery newQuery = new JRDesignQuery();
                    newQuery.setText(sql);
                    jd.setQuery(newQuery);
                    JasperReport jr = JasperCompileManager.compileReport(jd);
                    JasperPrint jp = JasperFillManager.fillReport(jr, null,dbcon);
                    JasperViewer.viewReport(jp,false);

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
        }
        else if(this.combSearchType.getSelectedItem().toString().equals("Flight ID")){
                try {
                    JasperDesign jd = JRXmlLoader.load("reports\\paymentReport_All.jrxml");
                    String sql = "select p.paymentID as 'Payment ID', p.method as 'Payment Method', p.payAmnt as 'Amount', p.date as 'Payment Date', t.ticketID as 'Ticket ID', t.custID as 'Customer ID', t.flightID as 'Flight ID' from payment_info p left outer join creditcard_info c on p.paymentID=c.paymentID, ticket_info t where t.paymentID=p.paymentID and t.flightID='" + this.txtSearch.getText() + "'";
                    JRDesignQuery newQuery = new JRDesignQuery();
                    newQuery.setText(sql);
                    jd.setQuery(newQuery);
                    JasperReport jr = JasperCompileManager.compileReport(jd);
                    JasperPrint jp = JasperFillManager.fillReport(jr, null,dbcon);
                    JasperViewer.viewReport(jp,false);

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
        }
        else if(this.combSearchType.getSelectedItem().toString().equals("Customer ID")){
                try {
                    JasperDesign jd = JRXmlLoader.load("reports\\paymentReport_All.jrxml");
                    String sql = "select p.paymentID as 'Payment ID', p.method as 'Payment Method', p.payAmnt as 'Amount', p.date as 'Payment Date', t.ticketID as 'Ticket ID', t.custID as 'Customer ID', t.flightID as 'Flight ID' from payment_info p left outer join creditcard_info c on p.paymentID=c.paymentID, ticket_info t where t.paymentID=p.paymentID and t.custID='" + this.txtSearch.getText() + "'";
                    JRDesignQuery newQuery = new JRDesignQuery();
                    newQuery.setText(sql);
                    jd.setQuery(newQuery);
                    JasperReport jr = JasperCompileManager.compileReport(jd);
                    JasperPrint jp = JasperFillManager.fillReport(jr, null,dbcon);
                    JasperViewer.viewReport(jp,false);

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
        }
        else if(this.combSearchType.getSelectedItem().toString().equals("Payment Date")){
                try {
                    JasperDesign jd = JRXmlLoader.load("reports\\paymentReport_All.jrxml");
                    String sql = "select p.paymentID as 'Payment ID', p.method as 'Payment Method', p.payAmnt as 'Amount', p.date as 'Payment Date', t.ticketID as 'Ticket ID', t.custID as 'Customer ID', t.flightID as 'Flight ID' from payment_info p left outer join creditcard_info c on p.paymentID=c.paymentID, ticket_info t where t.paymentID=p.paymentID and p.date='" + this.txtSearch.getText() + "'";
                    JRDesignQuery newQuery = new JRDesignQuery();
                    newQuery.setText(sql);
                    jd.setQuery(newQuery);
                    JasperReport jr = JasperCompileManager.compileReport(jd);
                    JasperPrint jp = JasperFillManager.fillReport(jr, null,dbcon);
                    JasperViewer.viewReport(jp,false);

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
        }
    }//GEN-LAST:event_btnPrintDetailsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPrintDetails;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> combSearchType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPayments;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
