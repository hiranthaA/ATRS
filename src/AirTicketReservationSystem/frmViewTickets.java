/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AirTicketReservationSystem;

import java.sql.*;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;


public class frmViewTickets extends javax.swing.JInternalFrame {

    Connection dbcon=null;
    private String selectedTicket=null;
    
    public frmViewTickets() {
        initComponents();
        dbcon = dbConnectr.Connect();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        combSearchType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTickets = new javax.swing.JTable();
        btnCancelTickets = new javax.swing.JButton();

        setClosable(true);
        setTitle("View Tickets");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setText("Search :");

        txtSearch.setToolTipText("(eg: Ticket ID - T0001, Custome ID - C0001)");

        combSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Ticket ID", "Customer ID", "Flight ID", "Class", "Flight Date" }));

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconSearch.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(combSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearch)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(btnSearch)))
                    .addComponent(combSearchType))
                .addContainerGap())
        );

        tblTickets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblTickets.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTicketsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTickets);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnCancelTickets.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconRemoveTicket.png"))); // NOI18N
        btnCancelTickets.setText("Cancel Ticket");
        btnCancelTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelTicketsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(198, 198, 198))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnCancelTickets)
                                .addGap(21, 21, 21))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancelTickets)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void getTicketInfo(){
        if(this.combSearchType.getSelectedItem().toString().equals("All")){
            String SQL = "select ticketID as 'Ticket ID', flightID as 'Flight ID', custID as 'Customer ID', class as 'Class' ,t_price as 'Ticket Price', flight_date as 'Flight Date', paymentID as 'Payment ID' from ticket_info";
            try{
                Statement stmnt = dbcon.createStatement();
                ResultSet rs = stmnt.executeQuery(SQL);
                this.tblTickets.setModel(DbUtils.resultSetToTableModel(rs));
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Cannot retrieve ticket data", "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(this.txtSearch.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Empty Search Field", "Search Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            if(this.combSearchType.getSelectedItem().toString().equals("Ticket ID")){
                String SQL = "select ticketID as 'Ticket ID', flightID as 'Flight ID', custID as 'Customer ID', class as 'Class' ,t_price as 'Ticket Price', flight_date as 'Flight Date', paymentID as 'Payment ID' from ticket_info where ticketID='"+this.txtSearch.getText()+"'";
                try{
                    Statement stmnt = dbcon.createStatement();
                    ResultSet rs = stmnt.executeQuery(SQL);
                    this.tblTickets.setModel(DbUtils.resultSetToTableModel(rs));
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Cannot retrieve ticket data", "Database Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else if(this.combSearchType.getSelectedItem().toString().equals("Flight ID")){
                String SQL = "select ticketID as 'Ticket ID', flightID as 'Flight ID', custID as 'Customer ID', class as 'Class' ,t_price as 'Ticket Price', flight_date as 'Flight Date', paymentID as 'Payment ID' from ticket_info where flightID='"+this.txtSearch.getText()+"'";
                try{
                    Statement stmnt = dbcon.createStatement();
                    ResultSet rs = stmnt.executeQuery(SQL);
                    this.tblTickets.setModel(DbUtils.resultSetToTableModel(rs));
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Cannot retrieve ticket data", "Database Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else if(this.combSearchType.getSelectedItem().toString().equals("Customer ID")){
                String SQL = "select ticketID as 'Ticket ID', flightID as 'Flight ID', custID as 'Customer ID', class as 'Class' ,t_price as 'Ticket Price', flight_date as 'Flight Date', paymentID as 'Payment ID' from ticket_info where custID='"+this.txtSearch.getText()+"'";
                try{
                    Statement stmnt = dbcon.createStatement();
                    ResultSet rs = stmnt.executeQuery(SQL);
                    this.tblTickets.setModel(DbUtils.resultSetToTableModel(rs));
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Cannot retrieve ticket data", "Database Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else if(this.combSearchType.getSelectedItem().toString().equals("Class")){
                String SQL = "select ticketID as 'Ticket ID', flightID as 'Flight ID', custID as 'Customer ID', class as 'Class' ,t_price as 'Ticket Price', flight_date as 'Flight Date', paymentID as 'Payment ID' from ticket_info where class='"+this.txtSearch.getText()+"'";
                try{
                    Statement stmnt = dbcon.createStatement();
                    ResultSet rs = stmnt.executeQuery(SQL);
                    this.tblTickets.setModel(DbUtils.resultSetToTableModel(rs));
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Cannot retrieve ticket data", "Database Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else if(this.combSearchType.getSelectedItem().toString().equals("Flight Date")){
                String SQL = "select ticketID as 'Ticket ID', flightID as 'Flight ID', custID as 'Customer ID', class as 'Class' ,t_price as 'Ticket Price', flight_date as 'Flight Date', paymentID as 'Payment ID' from ticket_info where flight_date='"+this.txtSearch.getText()+"'";
                try{
                    Statement stmnt = dbcon.createStatement();
                    ResultSet rs = stmnt.executeQuery(SQL);
                    this.tblTickets.setModel(DbUtils.resultSetToTableModel(rs));
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Cannot retrieve ticket data", "Database Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        
        }
    }
    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        MDIForm.frmViewTicketsActive=true;
        this.btnCancelTickets.setEnabled(false);
        String SQL = "select ticketID as 'Ticket ID', flightID as 'Flight ID', custID as 'Customer ID', class as 'Class' ,t_price as 'Ticket Price', flight_date as 'Flight Date', paymentID as 'Payment ID' from ticket_info";
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            this.tblTickets.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Cannot retrieve ticket data", "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        MDIForm.frmViewTicketsActive=false;
    }//GEN-LAST:event_formInternalFrameClosing

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        this.btnCancelTickets.setEnabled(false);
        this.selectedTicket=null;
        getTicketInfo();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tblTicketsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTicketsMouseClicked
        try{
            if(tblTickets.getModel().getValueAt(0, 0)!=null){
                this.btnCancelTickets.setEnabled(true);
                int row = tblTickets.getSelectedRow();
                selectedTicket = tblTickets.getModel().getValueAt(row, 0).toString();
            }
        }
        catch(ArrayIndexOutOfBoundsException e){
            this.btnCancelTickets.setEnabled(false);
            //do nothing
        }
    }//GEN-LAST:event_tblTicketsMouseClicked

    private void btnCancelTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelTicketsActionPerformed
        
        String SQL = "delete from ticket_info where ticketid='"+selectedTicket+"'";
        int userChoice = JOptionPane.showConfirmDialog(null,"Cancel selected ticket?", "Confirm Cancel", JOptionPane.YES_NO_OPTION);
        if(userChoice==0){
            try{
            Statement stmnt = dbcon.createStatement();
            stmnt.executeUpdate(SQL);
            JOptionPane.showMessageDialog(null, "Ticket canceled successfully", "Cancel Ticket", JOptionPane.INFORMATION_MESSAGE);
            getTicketInfo();
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Ticket cancelation failed", "Cancel Ticket", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnCancelTicketsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelTickets;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> combSearchType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTickets;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
