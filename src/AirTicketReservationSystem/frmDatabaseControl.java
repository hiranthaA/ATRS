/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AirTicketReservationSystem;

import java.awt.Color;
import java.sql.*;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;


public class frmDatabaseControl extends javax.swing.JInternalFrame {
        Connection dbcon = null;
    
    public frmDatabaseControl() {
        initComponents();
        dbcon = dbConnectr.Connect();
        getSourceinfo();
        getDestinationinfo();
        getFlightinfo();
        getPlaneinfo();
        setSourceCombo();
        setDestinationCombo();
        setPlaneIDCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSource = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnAddSource = new javax.swing.JButton();
        btnRemoveSource = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDestination = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnAddDestination = new javax.swing.JButton();
        btnRemoveDestination = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblFlights = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtPlaneID = new javax.swing.JTextField();
        lblFlightIDBanner = new javax.swing.JLabel();
        lblPlaneIDFlights = new javax.swing.JLabel();
        combSource = new javax.swing.JComboBox<>();
        lblSource = new javax.swing.JLabel();
        lblDestination = new javax.swing.JLabel();
        combDestination = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        spinHours = new javax.swing.JSpinner();
        spinMinutes = new javax.swing.JSpinner();
        lblBasicPrice = new javax.swing.JLabel();
        txtBasicPrice = new javax.swing.JTextField();
        btnAddFlights = new javax.swing.JButton();
        btnRemoveFlight = new javax.swing.JButton();
        btnUpdateFlight = new javax.swing.JButton();
        lblFlightID = new javax.swing.JLabel();
        combPlaneID = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        btnSaveFlight = new javax.swing.JButton();
        btnCancelFlight = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblPlanes = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        txtModel = new javax.swing.JTextField();
        lblPlaneIDBanner = new javax.swing.JLabel();
        lblModel = new javax.swing.JLabel();
        lblCompany = new javax.swing.JLabel();
        txtCompany = new javax.swing.JTextField();
        btnAddPlane = new javax.swing.JButton();
        txtSeats = new javax.swing.JTextField();
        lblnSeats = new javax.swing.JLabel();
        btnRemovePlane = new javax.swing.JButton();
        btnUpdatePlane = new javax.swing.JButton();
        lblPlaneID = new javax.swing.JLabel();
        btnSavePlane = new javax.swing.JButton();
        btnCancelPlane = new javax.swing.JButton();

        setClosable(true);
        setTitle("Database Control");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblSource.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Source"
            }
        ));
        tblSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSourceMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSource);

        jLabel1.setText("Source");

        btnAddSource.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconAdd.png"))); // NOI18N
        btnAddSource.setText("Add");
        btnAddSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSourceActionPerformed(evt);
            }
        });

        btnRemoveSource.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconRemove.png"))); // NOI18N
        btnRemoveSource.setText("Remove");
        btnRemoveSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveSourceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAddSource)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveSource, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddSource)
                    .addComponent(btnRemoveSource))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblDestination.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Destination"
            }
        ));
        tblDestination.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDestinationMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDestination);

        jLabel2.setText("Destination");

        btnAddDestination.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconAdd.png"))); // NOI18N
        btnAddDestination.setText("Add");
        btnAddDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDestinationActionPerformed(evt);
            }
        });

        btnRemoveDestination.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconRemove.png"))); // NOI18N
        btnRemoveDestination.setText("Remove");
        btnRemoveDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDestinationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnAddDestination)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveDestination, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveDestination)
                    .addComponent(btnAddDestination))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblFlights.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Flight ID", "Plane ID", "Source", "Destination", "Departure Time", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFlights.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFlightsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblFlights);

        jLabel3.setText("Flights");
        jLabel3.setToolTipText("");

        txtPlaneID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPlaneIDFocusLost(evt);
            }
        });
        txtPlaneID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPlaneIDActionPerformed(evt);
            }
        });

        lblFlightIDBanner.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblFlightIDBanner.setText("Add Flight :");

        lblPlaneIDFlights.setText("Plane ID :");

        combSource.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        lblSource.setText("Source :");

        lblDestination.setText("Destination :");

        combDestination.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel8.setText("Departure Time :");

        spinHours.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        spinMinutes.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        lblBasicPrice.setText("Basic Price (Rs) :");

        txtBasicPrice.setToolTipText("Price in Rs.");
        txtBasicPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBasicPriceFocusLost(evt);
            }
        });

        btnAddFlights.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconAdd.png"))); // NOI18N
        btnAddFlights.setText("Add Flight");
        btnAddFlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFlightsActionPerformed(evt);
            }
        });

        btnRemoveFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconRemove.png"))); // NOI18N
        btnRemoveFlight.setText("Remove");
        btnRemoveFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveFlightActionPerformed(evt);
            }
        });

        btnUpdateFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconEdit16x.png"))); // NOI18N
        btnUpdateFlight.setText("Update");
        btnUpdateFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateFlightActionPerformed(evt);
            }
        });

        lblFlightID.setText("Flight ID");

        combPlaneID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        combPlaneID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combPlaneIDItemStateChanged(evt);
            }
        });

        jLabel13.setText("H :");

        jLabel17.setText("M");

        btnSaveFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconTick.png"))); // NOI18N
        btnSaveFlight.setText("Save");
        btnSaveFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveFlightActionPerformed(evt);
            }
        });

        btnCancelFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconCancel.png"))); // NOI18N
        btnCancelFlight.setText("Cancel");
        btnCancelFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelFlightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(lblPlaneIDFlights)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPlaneID, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combPlaneID, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(lblBasicPrice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBasicPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 199, Short.MAX_VALUE)
                                .addComponent(btnAddFlights))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(lblSource)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combSource, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(lblDestination)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblFlightIDBanner)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblFlightID)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemoveFlight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdateFlight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelFlight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveFlight)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnCancelFlight, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(btnUpdateFlight, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSaveFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(btnRemoveFlight))))
                .addGap(13, 13, 13)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFlightIDBanner)
                    .addComponent(lblFlightID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPlaneID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPlaneIDFlights)
                    .addComponent(combSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSource)
                    .addComponent(lblDestination)
                    .addComponent(combDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combPlaneID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(spinHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBasicPrice)
                    .addComponent(txtBasicPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel17)
                    .addComponent(btnAddFlights))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblPlanes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Plane ID", "Model", "Company", "Seats"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPlanes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPlanesMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblPlanes);

        jLabel11.setText("Planes");
        jLabel11.setToolTipText("");

        txtModel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtModelFocusLost(evt);
            }
        });

        lblPlaneIDBanner.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPlaneIDBanner.setText("Add Plane :");

        lblModel.setText("Model :");

        lblCompany.setText("Company :");

        txtCompany.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCompanyFocusLost(evt);
            }
        });

        btnAddPlane.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconAdd.png"))); // NOI18N
        btnAddPlane.setText("Add Plane");
        btnAddPlane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPlaneActionPerformed(evt);
            }
        });

        txtSeats.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSeatsFocusLost(evt);
            }
        });

        lblnSeats.setText("Seats :");

        btnRemovePlane.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconRemove.png"))); // NOI18N
        btnRemovePlane.setText("Remove");
        btnRemovePlane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovePlaneActionPerformed(evt);
            }
        });

        btnUpdatePlane.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconEdit16x.png"))); // NOI18N
        btnUpdatePlane.setText("Update");
        btnUpdatePlane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePlaneActionPerformed(evt);
            }
        });

        lblPlaneID.setText("Plane ID");

        btnSavePlane.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconTick.png"))); // NOI18N
        btnSavePlane.setText("Save");
        btnSavePlane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavePlaneActionPerformed(evt);
            }
        });

        btnCancelPlane.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconCancel.png"))); // NOI18N
        btnCancelPlane.setText("Cancel");
        btnCancelPlane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelPlaneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(lblModel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCompany)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCompany, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(lblnSeats)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(btnAddPlane))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(lblPlaneIDBanner)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblPlaneID)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemovePlane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdatePlane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelPlane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSavePlane)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnRemovePlane)
                        .addComponent(btnUpdatePlane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSavePlane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(btnCancelPlane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jLabel11))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPlaneIDBanner)
                    .addComponent(lblPlaneID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblModel)
                    .addComponent(lblCompany)
                    .addComponent(txtCompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddPlane)
                    .addComponent(txtSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblnSeats))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        MDIForm.frmDatabaseControlActive=true;
        this.btnRemoveSource.setEnabled(false);
        this.btnRemoveDestination.setEnabled(false);
        this.btnRemoveFlight.setEnabled(false);
        this.btnUpdateFlight.setEnabled(false);
        this.btnCancelFlight.setEnabled(false);
        this.btnSaveFlight.setEnabled(false);
        this.btnRemovePlane.setEnabled(false);
        this.btnUpdatePlane.setEnabled(false);
        this.btnCancelPlane.setEnabled(false);
        this.btnSavePlane.setEnabled(false);
        this.lblFlightID.setText(generateFlightID());
        this.lblPlaneID.setText(generatePlaneID());
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        MDIForm.frmDatabaseControlActive=false;
    }//GEN-LAST:event_formInternalFrameClosing

    private void btnAddSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSourceActionPerformed
        String source = JOptionPane.showInputDialog(null, "Enter new source", "New source", JOptionPane.INFORMATION_MESSAGE);
        String insert_source_SQL = "insert into source_info values ('"+source+"')";
        String get_source_SQL = "select source from source_info";
        boolean exist=false;
        
        if(source!=null){
            if(source.equals("")){
                JOptionPane.showMessageDialog(null, "Empty field", "Input Error!", JOptionPane.ERROR_MESSAGE);
            }
            else{
                try{
                    Statement stmnt = dbcon.createStatement();

                    ResultSet rs = stmnt.executeQuery(get_source_SQL);
                    while(rs.next()){
                        if(rs.getString("source").equals(source)){
                            exist=true;
                            break;
                        }
                    }
                    if(exist){
                        JOptionPane.showMessageDialog(null, "The new source already exist!", "Input Error!", JOptionPane.ERROR_MESSAGE);
                    }
                    else{
                        try{
                            Statement stmnt2 = dbcon.createStatement();
                            stmnt2.executeUpdate(insert_source_SQL);
                            getSourceinfo();
                            this.combSource.addItem(source);
                            this.btnRemoveSource.setEnabled(false);
                            JOptionPane.showMessageDialog(null, "Source added successfully", "Source added", JOptionPane.INFORMATION_MESSAGE);
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, "Cannot insert data!", "Database error!", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Cannot retrieve data!", "Database error!", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnAddSourceActionPerformed

    private void btnAddDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDestinationActionPerformed
        String destination = JOptionPane.showInputDialog(null, "Enter new destination", "New destination", JOptionPane.INFORMATION_MESSAGE);
        String insert_destination_SQL = "insert into destination_info values ('"+destination+"')";
        String get_destination_SQL = "select destination from destination_info";
        boolean exist=false;
        
        if(destination!=null){
            if(destination.equals("")){
                JOptionPane.showMessageDialog(null, "Empty field", "Input Error!", JOptionPane.ERROR_MESSAGE);
            }
            else{
                try{
                    Statement stmnt = dbcon.createStatement();

                    ResultSet rs = stmnt.executeQuery(get_destination_SQL);
                    while(rs.next()){
                        if(rs.getString("destination").equals(destination)){
                            exist=true;
                            break;
                        }
                    }
                    if(exist){
                        JOptionPane.showMessageDialog(null, "The new destination already exist!", "Input Error!", JOptionPane.ERROR_MESSAGE);
                    }
                    else{
                        try{
                            Statement stmnt2 = dbcon.createStatement();
                            stmnt2.executeUpdate(insert_destination_SQL);
                            getDestinationinfo();
                            this.combDestination.addItem(destination);
                            this.btnRemoveDestination.setEnabled(false);
                            JOptionPane.showMessageDialog(null, "destination added successfully", "destination added", JOptionPane.INFORMATION_MESSAGE);
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, "Cannot insert data!", "Database error!", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Cannot retrieve data!", "Database error!", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnAddDestinationActionPerformed

    private void tblSourceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSourceMouseClicked
        this.btnRemoveSource.setEnabled(true);
    }//GEN-LAST:event_tblSourceMouseClicked

    private void btnRemoveSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveSourceActionPerformed
        if(tblSource.getModel().getValueAt(0, 0)!=null){
            int row = tblSource.getSelectedRow();
            
            String selectedSource = tblSource.getModel().getValueAt(row, 0).toString();
            
            String SQL = "delete from source_info where source='"+selectedSource+"'";
            int userChoice = JOptionPane.showConfirmDialog(null,"Remove selected source?", "Confirm removal", JOptionPane.YES_NO_OPTION);
            if(userChoice==0){
                try{
                    Statement stmnt = dbcon.createStatement();
                    stmnt.executeUpdate(SQL);
                    getSourceinfo();
                    this.combSource.removeItem(selectedSource);
                    this.btnRemoveSource.setEnabled(false);
                    JOptionPane.showMessageDialog(null, "Source Successfully Removed", "Source Removed", JOptionPane.INFORMATION_MESSAGE);
                    
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Cannot Remove source", "Database error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnRemoveSourceActionPerformed

    private void btnRemoveDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDestinationActionPerformed
        if(tblDestination.getModel().getValueAt(0, 0)!=null){
            int row = tblDestination.getSelectedRow();
            
            String selectedDestination = tblDestination.getModel().getValueAt(row, 0).toString();
            
            String SQL = "delete from destination_info where destination='"+selectedDestination+"'";
            int userChoice = JOptionPane.showConfirmDialog(null,"Remove selected destination?", "Confirm removal", JOptionPane.YES_NO_OPTION);
            if(userChoice==0){
                try{
                    Statement stmnt = dbcon.createStatement();
                    stmnt.executeUpdate(SQL);
                    getDestinationinfo();
                    this.combDestination.removeItem(selectedDestination);
                    this.btnRemoveDestination.setEnabled(false);
                    JOptionPane.showMessageDialog(null, "Destination Successfully Removed", "Destination Removed", JOptionPane.INFORMATION_MESSAGE);
                    
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Cannot Remove Destination", "Database error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnRemoveDestinationActionPerformed

    private void tblDestinationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDestinationMouseClicked
        this.btnRemoveDestination.setEnabled(true);
    }//GEN-LAST:event_tblDestinationMouseClicked

    private void btnRemoveFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveFlightActionPerformed
        if(tblFlights.getModel().getValueAt(0, 0)!=null){
            int row = tblFlights.getSelectedRow();
            
            String selectedFlight = tblFlights.getModel().getValueAt(row, 0).toString();
            
            String SQL = "delete from flight_info where flightID='"+selectedFlight+"'";
            int userChoice = JOptionPane.showConfirmDialog(null,"Remove selected Flight?", "Confirm removal", JOptionPane.YES_NO_OPTION);
            if(userChoice==0){
                try{
                    Statement stmnt = dbcon.createStatement();
                    stmnt.executeUpdate(SQL);
                    getFlightinfo();
                    this.btnRemoveFlight.setEnabled(false);
                    this.btnUpdateFlight.setEnabled(false);
                    JOptionPane.showMessageDialog(null, "Flight Successfully Removed", "Flight Removed", JOptionPane.INFORMATION_MESSAGE);
                    this.lblPlaneID.setForeground(Color.black);
        this.lblPlaneID.setToolTipText("Plane ID");
        this.lblSource.setForeground(Color.black);
        this.lblSource.setToolTipText("Select a Source");
        this.lblDestination.setForeground(Color.black);
        this.lblDestination.setToolTipText("Select a Destination");
        this.lblBasicPrice.setForeground(Color.black);
        this.lblBasicPrice.setToolTipText("Price in Rs.");
        this.lblFlightIDBanner.setText("Update Flight :");
                    
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Cannot Remove Flight", "Database error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnRemoveFlightActionPerformed

    private void tblFlightsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFlightsMouseClicked
        if(this.tblFlights.isEnabled()){
            this.btnRemoveFlight.setEnabled(true);
            this.btnUpdateFlight.setEnabled(true);
        }
    }//GEN-LAST:event_tblFlightsMouseClicked

    private void btnRemovePlaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovePlaneActionPerformed
        if(tblPlanes.getModel().getValueAt(0, 0)!=null){
            int row = tblPlanes.getSelectedRow();
            
            String selectedPlane = tblPlanes.getModel().getValueAt(row, 0).toString();
            
            String SQL = "delete from plane_info where planeID='"+selectedPlane+"'";
            int userChoice = JOptionPane.showConfirmDialog(null,"Remove selected Plane?", "Confirm removal", JOptionPane.YES_NO_OPTION);
            if(userChoice==0){
                try{
                    Statement stmnt = dbcon.createStatement();
                    stmnt.executeUpdate(SQL);
                    getPlaneinfo();
                    this.combPlaneID.removeItem(selectedPlane);
                    this.btnRemovePlane.setEnabled(false);
                    this.btnUpdatePlane.setEnabled(false);
                    JOptionPane.showMessageDialog(null, "Plane Successfully Removed", "Plane Removed", JOptionPane.INFORMATION_MESSAGE);
                    
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Cannot remove the plane", "Database error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnRemovePlaneActionPerformed

    private void tblPlanesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPlanesMouseClicked
        if(this.tblPlanes.isEnabled()){
            this.btnRemovePlane.setEnabled(true);
            this.btnUpdatePlane.setEnabled(true);
        }
    }//GEN-LAST:event_tblPlanesMouseClicked

    private void btnAddFlightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFlightsActionPerformed
        
        if(cktxtPlaneID() & ckcombSource() & ckcombDestination() & cktxtBasicPrice()){
            int userChoice = JOptionPane.showConfirmDialog(null,"Are you sure details are correct?", "Confirm Details", JOptionPane.YES_NO_OPTION);
            
            if(userChoice==0){
                String FlightID=this.lblFlightID.getText();
                String PlaneID = this.txtPlaneID.getText();
                String Source = this.combSource.getSelectedItem().toString();
                String Destination = this.combDestination.getSelectedItem().toString();
                String BasicPrice = this.txtBasicPrice.getText();
                //---------------------------
                int h = Integer.parseInt(this.spinHours.getValue().toString());
                int m = Integer.parseInt(this.spinMinutes.getValue().toString());
                String hours=Integer.toString(h);
                String minutes=Integer.toString(m);
                if(h<10){
                    hours="0"+h;
                }
                if(m<10){
                    minutes="0"+m;
                }

                String DepTime = hours+":"+minutes;
                //---------------------------------

                try{
                    String SQL = "insert into flight_info values(?,?,?,?,?,?)";
                    PreparedStatement pst = dbcon.prepareStatement(SQL);
                    pst.setString(1, FlightID);
                    pst.setString(2, PlaneID);
                    pst.setString(3, Source);
                    pst.setString(4, Destination);
                    pst.setString(5, DepTime);
                    pst.setString(6, BasicPrice);
                    pst.executeUpdate();
                    getFlightinfo();
                    this.btnRemoveFlight.setEnabled(false);
                    this.btnUpdateFlight.setEnabled(false);
                    JOptionPane.showMessageDialog(null, "Flight details added successfully","Flight Added",JOptionPane.INFORMATION_MESSAGE);
                    increaseFlightByOne();
                    this.lblFlightID.setText(generateFlightID());
                    this.txtPlaneID.setText("");
                    this.txtBasicPrice.setText("");
                    this.spinHours.setValue(0);
                    this.spinMinutes.setValue(0);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Database Connection Error","Database error",JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Cannot Add Flight, Invalid Details","Invalid Details",JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_btnAddFlightsActionPerformed

    private void btnAddPlaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPlaneActionPerformed
        if(cktxtModel() & cktxtCompany() & cktxtSeats()){   
            String PlaneID=this.lblPlaneID.getText();
            String Model = this.txtModel.getText();
            String Company = this.txtCompany.getText();
            String Seats = this.txtSeats.getText();

            try{
                int userChoice = JOptionPane.showConfirmDialog(null,"Are you sure details are correct?", "Confirm Details", JOptionPane.YES_NO_OPTION);
                if(userChoice==0){
                    String SQL = "insert into plane_info values(?,?,?,?)";
                    PreparedStatement pst = dbcon.prepareStatement(SQL);
                    pst.setString(1, PlaneID);
                    pst.setString(2, Model);
                    pst.setString(3, Company);
                    pst.setString(4, Seats);
                    pst.executeUpdate();
                    getPlaneinfo();
                    this.btnRemovePlane.setEnabled(false);
                    this.btnUpdatePlane.setEnabled(false);
                    JOptionPane.showMessageDialog(null, "Plane details added successfully","Plane Added",JOptionPane.INFORMATION_MESSAGE);
                    increasePlaneByOne();
                    this.combPlaneID.addItem(this.lblPlaneID.getText());
                    this.lblPlaneID.setText(generatePlaneID());
                    this.txtModel.setText("");
                    this.txtCompany.setText("");
                    this.txtSeats.setText("");
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Database Connection Error","Database error",JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Incorrect Details","Detail Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddPlaneActionPerformed

    private void combPlaneIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combPlaneIDItemStateChanged
        if(this.combPlaneID.getSelectedIndex()==0){
            this.txtPlaneID.setText("");
        }
        else{
            this.txtPlaneID.setText(this.combPlaneID.getSelectedItem().toString());
            this.lblPlaneIDFlights.setForeground(Color.black);
        }
    }//GEN-LAST:event_combPlaneIDItemStateChanged

    private void btnUpdateFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateFlightActionPerformed

        if(this.tblFlights.getModel().getValueAt(0, 0)!=null){ 
            this.btnSaveFlight.setEnabled(true);
            this.btnCancelFlight.setEnabled(true);
            this.btnAddFlights.setEnabled(false);
            this.btnUpdateFlight.setEnabled(false);
            this.btnRemoveFlight.setEnabled(false);
            this.tblFlights.setEnabled(false);
            this.lblPlaneID.setForeground(Color.black);
            this.lblPlaneID.setToolTipText("Plane ID");
            this.lblSource.setForeground(Color.black);
            this.lblSource.setToolTipText("Select a Source");
            this.lblDestination.setForeground(Color.black);
            this.lblDestination.setToolTipText("Select a Destination");
            this.lblBasicPrice.setForeground(Color.black);
            this.lblBasicPrice.setToolTipText("Price in Rs.");
            this.lblFlightIDBanner.setText("Update Flight :");
            int row = this.tblFlights.getSelectedRow();
            this.lblFlightID.setText(this.tblFlights.getModel().getValueAt(row, 0).toString());
            this.txtPlaneID.setText(this.tblFlights.getModel().getValueAt(row, 1).toString());
            this.combPlaneID.setSelectedItem(this.tblFlights.getModel().getValueAt(row, 1));
            this.combSource.setSelectedItem(this.tblFlights.getModel().getValueAt(row, 2));
            this.combDestination.setSelectedItem(this.tblFlights.getModel().getValueAt(row, 3));
            this.txtBasicPrice.setText(this.tblFlights.getModel().getValueAt(row, 5).toString());
            String dep_time=this.tblFlights.getModel().getValueAt(row, 4).toString();
            StringTokenizer st = new StringTokenizer(dep_time,":");
            this.spinHours.setValue(Integer.parseInt(st.nextToken()));
            this.spinMinutes.setValue(Integer.parseInt(st.nextToken()));

        }
    }//GEN-LAST:event_btnUpdateFlightActionPerformed

    private void btnSaveFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveFlightActionPerformed
        if(cktxtPlaneID() & ckcombSource() & ckcombDestination() & cktxtBasicPrice()){
            int userChoice = JOptionPane.showConfirmDialog(null,"Are you sure details are correct?", "Confirm Details", JOptionPane.YES_NO_OPTION);
            
            if(userChoice==0){
                String FlightID=this.lblFlightID.getText();
                String PlaneID = this.txtPlaneID.getText();
                String Source = this.combSource.getSelectedItem().toString();
                String Destination = this.combDestination.getSelectedItem().toString();
                String BasicPrice = this.txtBasicPrice.getText();
                //---------------------------
                int h = Integer.parseInt(this.spinHours.getValue().toString());
                int m = Integer.parseInt(this.spinMinutes.getValue().toString());
                String hours=Integer.toString(h);
                String minutes=Integer.toString(m);
                if(h<10){
                    hours="0"+h;
                }
                if(m<10){
                    minutes="0"+m;
                }

                String DepTime = hours+":"+minutes;
                //---------------------------------

                try{
                    String SQL = "update flight_info set planeID=?,source=?,destination=?,dep_time=?,price=? where flightID=?";
                    PreparedStatement pst = dbcon.prepareStatement(SQL);
                    pst.setString(1, PlaneID);
                    pst.setString(2, Source);
                    pst.setString(3, Destination);
                    pst.setString(4, DepTime);
                    pst.setString(5, BasicPrice);
                    pst.setString(6, FlightID);
                    pst.executeUpdate();
                    getFlightinfo();
                    JOptionPane.showMessageDialog(null, "Flight details Updated successfully","Flight Updated",JOptionPane.INFORMATION_MESSAGE);
                    this.btnRemoveFlight.setEnabled(false);
                    this.btnUpdateFlight.setEnabled(false);
                    this.btnCancelFlight.setEnabled(false);
                    this.btnSaveFlight.setEnabled(false);
                    this.btnAddFlights.setEnabled(true);
                    this.tblFlights.setEnabled(true);
                    this.lblFlightIDBanner.setText("Add Flight :");
                    this.lblFlightID.setText(generateFlightID());
                    this.combPlaneID.setSelectedIndex(0);
                    this.combSource.setSelectedIndex(0);
                    this.combDestination.setSelectedIndex(0);
                    this.spinHours.setValue(0);
                    this.spinMinutes.setValue(0);
                    this.txtBasicPrice.setText("");
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Database Connection Error","Database error",JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Cannot Update Flight, Invalid Details","Invalid Details",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveFlightActionPerformed

    private void btnSavePlaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavePlaneActionPerformed
        if(cktxtModel() & cktxtCompany() & cktxtSeats()){
            int userChoice = JOptionPane.showConfirmDialog(null,"Are you sure details are correct?", "Confirm Details", JOptionPane.YES_NO_OPTION);
            
            if(userChoice==0){
                String PlaneID=this.lblPlaneID.getText();
                String Model = this.txtModel.getText();
                String Company = this.txtCompany.getText();
                String Seats = this.txtSeats.getText();

                try{
                    String SQL = "update plane_info set model=?, company=?, nseats=? where planeID=?";
                    PreparedStatement pst = dbcon.prepareStatement(SQL);
                    pst.setString(1, Model);
                    pst.setString(2, Company);
                    pst.setString(3, Seats);
                    pst.setString(4, PlaneID);
                    pst.executeUpdate();
                    getPlaneinfo();
                    this.btnRemovePlane.setEnabled(false);
                    this.btnUpdatePlane.setEnabled(false);
                    JOptionPane.showMessageDialog(null, "Plane details updated successfully","Plane Updated",JOptionPane.INFORMATION_MESSAGE);
                    this.btnCancelPlane.setEnabled(false);
                    this.btnSavePlane.setEnabled(false);
                    this.btnAddPlane.setEnabled(true);
                    this.tblPlanes.setEnabled(true);
                    this.lblPlaneIDBanner.setText("Add Plane :");
                    this.lblPlaneID.setText(generatePlaneID());
                    this.txtModel.setText("");
                    this.txtCompany.setText("");
                    this.txtSeats.setText("");
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Database Connection Error","Database error",JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Cannot Update Plane, Invalid Details","Invalid Details",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSavePlaneActionPerformed

    private void btnCancelFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelFlightActionPerformed
        this.btnCancelFlight.setEnabled(false);
        this.btnSaveFlight.setEnabled(false);
        this.btnUpdateFlight.setEnabled(true);
        this.btnRemoveFlight.setEnabled(true);
        this.tblFlights.setEnabled(true);
        this.lblFlightIDBanner.setText("Add Flight :");
        this.lblFlightID.setText(generateFlightID());
        this.combPlaneID.setSelectedIndex(0);
        this.combSource.setSelectedIndex(0);
        this.combDestination.setSelectedIndex(0);
        this.spinHours.setValue(0);
        this.spinMinutes.setValue(0);
        this.txtBasicPrice.setText("");
        this.lblPlaneIDFlights.setForeground(Color.black);
        this.lblPlaneIDFlights.setToolTipText("Plane ID");
        this.lblSource.setForeground(Color.black);
        this.lblSource.setToolTipText("Select a Source");
        this.lblDestination.setForeground(Color.black);
        this.lblDestination.setToolTipText("Select a Destination");
        this.lblBasicPrice.setForeground(Color.black);
        this.lblBasicPrice.setToolTipText("Price in Rs.");
        this.lblFlightIDBanner.setText("Update Flight :");
        this.btnAddFlights.setEnabled(true);
    }//GEN-LAST:event_btnCancelFlightActionPerformed

    private void txtPlaneIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPlaneIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPlaneIDActionPerformed

    private void txtPlaneIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPlaneIDFocusLost
        cktxtPlaneID();
    }//GEN-LAST:event_txtPlaneIDFocusLost

    private void txtBasicPriceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBasicPriceFocusLost
        cktxtBasicPrice();
    }//GEN-LAST:event_txtBasicPriceFocusLost

    private void btnUpdatePlaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePlaneActionPerformed
        if(this.tblPlanes.getModel().getValueAt(0, 0)!=null){ 
            this.btnSavePlane.setEnabled(true);
            this.btnCancelPlane.setEnabled(true);
            this.btnAddPlane.setEnabled(false);
            this.btnUpdatePlane.setEnabled(false);
            this.btnRemovePlane.setEnabled(false);
            this.tblPlanes.setEnabled(false);
            this.lblModel.setForeground(Color.black);
            this.lblModel.setToolTipText("Plane Model");
            this.lblCompany.setForeground(Color.black);
            this.lblCompany.setToolTipText("Owner Company");
            this.lblnSeats.setForeground(Color.black);
            this.lblnSeats.setToolTipText("No.of Seats");
            this.lblPlaneIDBanner.setText("Update Plane :");
            int row = this.tblPlanes.getSelectedRow();
            this.lblPlaneID.setText(this.tblPlanes.getModel().getValueAt(row, 0).toString());
            this.txtModel.setText(this.tblPlanes.getModel().getValueAt(row, 1).toString());
            this.txtCompany.setText(this.tblPlanes.getModel().getValueAt(row, 2).toString());
            this.txtSeats.setText(this.tblPlanes.getModel().getValueAt(row, 3).toString());
        }
    }//GEN-LAST:event_btnUpdatePlaneActionPerformed

    private void btnCancelPlaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelPlaneActionPerformed
        this.btnCancelPlane.setEnabled(false);
        this.btnSavePlane.setEnabled(false);
        this.btnUpdatePlane.setEnabled(true);
        this.btnRemovePlane.setEnabled(true);
        this.tblPlanes.setEnabled(true);
        this.lblPlaneIDBanner.setText("Add Plane :");
        this.lblPlaneID.setText(generatePlaneID());
        this.txtModel.setText("");
        this.txtCompany.setText("");
        this.txtSeats.setText("");
        this.lblPlaneID.setForeground(Color.black);
        this.lblPlaneID.setToolTipText("Plane ID");
        this.lblModel.setForeground(Color.black);
        this.lblModel.setToolTipText("Plane Model");
        this.lblCompany.setForeground(Color.black);
        this.lblCompany.setToolTipText("Owner Company");
        this.lblnSeats.setForeground(Color.black);
        this.lblnSeats.setToolTipText("No.of Seats");
        this.lblPlaneIDBanner.setText("Add Plane :");
        this.btnAddPlane.setEnabled(true);
    }//GEN-LAST:event_btnCancelPlaneActionPerformed

    private void txtModelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtModelFocusLost
        cktxtModel();
    }//GEN-LAST:event_txtModelFocusLost

    private void txtCompanyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCompanyFocusLost
        cktxtCompany();
    }//GEN-LAST:event_txtCompanyFocusLost

    private void txtSeatsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSeatsFocusLost
        cktxtSeats();
    }//GEN-LAST:event_txtSeatsFocusLost

    
    //Implemented methods-----------------------------------------------------------
    
    public void getSourceinfo(){
        String SQL = "select source as 'Source' from source_info";
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            this.tblSource.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Cannot retrieve source data", "Database Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void getDestinationinfo(){
        String SQL = "select destination as 'Destination' from destination_info";
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            this.tblDestination.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "cannot retrieve destination data", "Database Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void getFlightinfo(){
        String SQL = "select flightID as 'Flight ID', planeID as 'Plane ID', source as 'Source', destination as 'Destination', dep_time as 'Departure Time', price as 'Basic Price (Rs)' from flight_info";
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            this.tblFlights.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Cannot Retrieve flight data", "Database Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void getPlaneinfo(){
        String SQL = "select planeID as 'Plane ID', model as 'Model', company as 'Company', nseats as 'No.of.Seats' from plane_info";
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            this.tblPlanes.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Cannot retrieve plane data", "Database Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void setSourceCombo(){
        String SQL = "select source from source_info";
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            while(rs.next()){
                this.combSource.addItem(rs.getString("source"));
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Cannot retrieve source data", "Database Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void setDestinationCombo(){
        String SQL = "select destination from destination_info";
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            while(rs.next()){
                this.combDestination.addItem(rs.getString("destination"));
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Cannot retrieve source data", "Database Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void setPlaneIDCombo(){
        String SQL = "select planeID from plane_info";
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            while(rs.next()){
                this.combPlaneID.addItem(rs.getString("planeId"));
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Cannot retrieve PlaneID data", "Database Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public String generateFlightID(){
        String SQL = "select * from count";
        String aType="F";
        int nFlights=0;
        String FlightID="";
        
        try{
            Statement stmnt = dbcon.createStatement();
            
            ResultSet rs = stmnt.executeQuery(SQL);
            while(rs.next()){
                    nFlights = rs.getInt("Flight");
            } 
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(null, "Database connection failed while generating PlaneID","Database Connection Error",JOptionPane.ERROR_MESSAGE);
        }
        
        if(nFlights<9){
            FlightID=aType.concat("000").concat(Integer.toString(nFlights+1));
        }
        else if(nFlights<99){
            FlightID=aType.concat("00").concat(Integer.toString(nFlights+1));
        }
        else if(nFlights<999){
            FlightID=aType.concat("0").concat(Integer.toString(nFlights+1));
        }
        else if(nFlights<9999){
            FlightID=aType.concat(Integer.toString(nFlights+1));
        }
        else{
            JOptionPane.showMessageDialog(null, "Cannot Generate FlightID. Maximum Flights Reached","Error",JOptionPane.ERROR_MESSAGE);
        }
        return FlightID;
    }
    
    public String generatePlaneID(){
        String SQL = "select * from count";
        String aType="P";
        int nPlanes=0;
        String PlaneID="";
        
        try{
            Statement stmnt = dbcon.createStatement();
            
            ResultSet rs = stmnt.executeQuery(SQL);
            while(rs.next()){
                    nPlanes = rs.getInt("Plane");
            } 
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(null, "Database connection failed while generating PlaneID","Database Connection Error",JOptionPane.ERROR_MESSAGE);
        }
        
        if(nPlanes<9){
            PlaneID=aType.concat("000").concat(Integer.toString(nPlanes+1));
        }
        else if(nPlanes<99){
            PlaneID=aType.concat("00").concat(Integer.toString(nPlanes+1));
        }
        else if(nPlanes<999){
            PlaneID=aType.concat("0").concat(Integer.toString(nPlanes+1));
        }
        else if(nPlanes<9999){
            PlaneID=aType.concat(Integer.toString(nPlanes+1));
        }
        else{
            JOptionPane.showMessageDialog(null, "Cannot Generate FlightID. Maximum Flights Reached","Error",JOptionPane.ERROR_MESSAGE);
        }
        return PlaneID;
    }
    
    public void increaseFlightByOne(){
        String SQL = "select Flight from count";
        int nFlight=0;
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            while(rs.next()){
                nFlight = rs.getInt("Flight");
            }
            
            String SQL2 = "update count set Flight="+(nFlight+1)+" where Flight="+nFlight;
            
            try{
                Statement stmnt2 = dbcon.createStatement();
                stmnt.executeUpdate(SQL2);
            }
            catch(Exception ex){
                JOptionPane.showMessageDialog(null, "Database connection failed while saving information","Database Connection Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Database connection failed while saving information","Database Connection Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void increasePlaneByOne(){
        String SQL = "select * from count";
        int nPlanes=0;
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            while(rs.next()){
                nPlanes = rs.getInt("Plane");
            }
            
            String SQL2 = "update count set Plane="+(nPlanes+1)+" where Plane="+nPlanes;
            
            try{
                Statement stmnt2 = dbcon.createStatement();
                stmnt.executeUpdate(SQL2);
            }
            catch(Exception ex){
                JOptionPane.showMessageDialog(null, "Database connection failed while saving information","Database Connection Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Database connection failed while saving information","Database Connection Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public boolean cktxtModel(){
        if(this.txtModel.getText().equals("")){
            lblModel.setForeground(Color.red);
            lblModel.setToolTipText("Empty Field!");
            return false;
        }
        else{
            lblModel.setForeground(Color.black);
            lblModel.setToolTipText("Plane Model");
            return true;
        }
    }
    
    public boolean cktxtCompany(){
        if(this.txtCompany.getText().equals("")){
            lblCompany.setForeground(Color.red);
            lblCompany.setToolTipText("Empty Field!");
            return false;
        }
        else{
            lblCompany.setForeground(Color.black);
            lblCompany.setToolTipText("Owner Company");
            return true;
        }
    }
    
    public boolean cktxtSeats(){
        String nSeats=this.txtSeats.getText();
        if(nSeats.equals("")){
            lblnSeats.setForeground(Color.red);
            lblnSeats.setToolTipText("Empty Field!");
            return false;
        }
        else{
            boolean isanum=true;
            for(int x=0; x<nSeats.length();x++){
                if(Character.isDigit(nSeats.charAt(x))){
                    isanum=true;
                }
                else{
                    isanum=false;
                    break;
                }
            }
            
            if(isanum){
                lblnSeats.setForeground(Color.black);
                lblnSeats.setToolTipText("No.of Seats");
                return true;
            }
            else{
                lblnSeats.setForeground(Color.red);
                lblnSeats.setToolTipText("Invalid Value!");
                return false;
            }
        }
    }
    
    public boolean cktxtPlaneID(){
        String sql = "select planeID from plane_info";
        boolean found=false;
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(sql);
            while(rs.next()){
                if(rs.getString("planeID").equals(this.txtPlaneID.getText())){
                    found = true;
                    break;
                }
                else{
                    found = false;
                }
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Cannot retrieve plane data", "Database Error!", JOptionPane.ERROR_MESSAGE);
        }
        if(found){
            this.lblPlaneIDFlights.setForeground(Color.black);
            this.lblPlaneIDFlights.setToolTipText("");
            this.combPlaneID.setSelectedItem(this.txtPlaneID.getText());
            return true;
        }
        else{
            this.lblPlaneIDFlights.setForeground(Color.red);
            this.lblPlaneIDFlights.setToolTipText("Invalid Plane ID");
            this.combPlaneID.setSelectedIndex(0);
            return false;
        }
    }
    
    public boolean cktxtBasicPrice(){
        if(this.txtBasicPrice.getText().equals("")){
            this.lblBasicPrice.setForeground(Color.red);
            this.lblBasicPrice.setToolTipText("Empty Field");
            return false;
        }
        else{
            String price = this.txtBasicPrice.getText();
            boolean alldigits=true;
            for(int x=0; x<price.length(); x++){
                if(!Character.isDigit(price.charAt(x))){
                    alldigits=false;
                    break;
                }
            }
            
            if(alldigits){
                this.lblBasicPrice.setForeground(Color.black);
                this.lblBasicPrice.setToolTipText("price in Rs.");
                return true;
            }
            else{
                this.lblBasicPrice.setForeground(Color.red);
                this.lblBasicPrice.setToolTipText("Invalid value");
                return false;
            }
        }
    }
    
    public boolean ckcombSource(){
        if(this.combSource.getSelectedIndex()==0){
            this.lblSource.setForeground(Color.red);
            this.lblSource.setToolTipText("No Source selected");
            return false;
        }
        else{
            this.lblSource.setForeground(Color.black);
            this.lblSource.setToolTipText("Select a Source");
            return true;
        }
    }
    
    public boolean ckcombDestination(){
        if(this.combDestination.getSelectedIndex()==0){
            this.lblDestination.setForeground(Color.red);
            this.lblDestination.setToolTipText("No Destination selected");
            return false;
        }
        else{
            this.lblDestination.setForeground(Color.black);
            this.lblDestination.setToolTipText("Select a Destination");
            return true;
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDestination;
    private javax.swing.JButton btnAddFlights;
    private javax.swing.JButton btnAddPlane;
    private javax.swing.JButton btnAddSource;
    private javax.swing.JButton btnCancelFlight;
    private javax.swing.JButton btnCancelPlane;
    private javax.swing.JButton btnRemoveDestination;
    private javax.swing.JButton btnRemoveFlight;
    private javax.swing.JButton btnRemovePlane;
    private javax.swing.JButton btnRemoveSource;
    private javax.swing.JButton btnSaveFlight;
    private javax.swing.JButton btnSavePlane;
    private javax.swing.JButton btnUpdateFlight;
    private javax.swing.JButton btnUpdatePlane;
    private javax.swing.JComboBox<String> combDestination;
    private javax.swing.JComboBox<String> combPlaneID;
    private javax.swing.JComboBox<String> combSource;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblBasicPrice;
    private javax.swing.JLabel lblCompany;
    private javax.swing.JLabel lblDestination;
    private javax.swing.JLabel lblFlightID;
    private javax.swing.JLabel lblFlightIDBanner;
    private javax.swing.JLabel lblModel;
    private javax.swing.JLabel lblPlaneID;
    private javax.swing.JLabel lblPlaneIDBanner;
    private javax.swing.JLabel lblPlaneIDFlights;
    private javax.swing.JLabel lblSource;
    private javax.swing.JLabel lblnSeats;
    private javax.swing.JSpinner spinHours;
    private javax.swing.JSpinner spinMinutes;
    private javax.swing.JTable tblDestination;
    private javax.swing.JTable tblFlights;
    private javax.swing.JTable tblPlanes;
    private javax.swing.JTable tblSource;
    private javax.swing.JTextField txtBasicPrice;
    private javax.swing.JTextField txtCompany;
    private javax.swing.JTextField txtModel;
    private javax.swing.JTextField txtPlaneID;
    private javax.swing.JTextField txtSeats;
    // End of variables declaration//GEN-END:variables
}
