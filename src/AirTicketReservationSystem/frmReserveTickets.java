/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AirTicketReservationSystem;

import java.awt.Color;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import java.util.Date;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

public class frmReserveTickets extends javax.swing.JInternalFrame {
    private String paymentID;
    Connection dbcon=null;
    
    public frmReserveTickets() {
        initComponents();
        dbcon = dbConnectr.Connect();
        getSource();
        getDestination();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrpPayment = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        combSource = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        combDestination = new javax.swing.JComboBox<>();
        btnSearchFlights = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFlights = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        txtFlightID = new javax.swing.JTextField();
        lblDestination = new javax.swing.JLabel();
        lblClass = new javax.swing.JLabel();
        lblFlightID = new javax.swing.JLabel();
        combClass = new javax.swing.JComboBox<>();
        txtDestination = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        txtCustID = new javax.swing.JTextField();
        lblCustomerID = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        lblPaymentMethod = new javax.swing.JLabel();
        rbCash = new javax.swing.JRadioButton();
        rbCreditCard = new javax.swing.JRadioButton();
        lblCCNo = new javax.swing.JLabel();
        txtCCNo = new javax.swing.JTextField();
        lblCCType = new javax.swing.JLabel();
        lblCCHolder = new javax.swing.JLabel();
        txtCCHolder = new javax.swing.JTextField();
        lblCCBank = new javax.swing.JLabel();
        txtCCBank = new javax.swing.JTextField();
        btnCTransaction = new javax.swing.JButton();
        combCCType = new javax.swing.JComboBox<>();
        btnPrintTransaction = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        spinNTickets = new javax.swing.JSpinner();
        lblticket = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        lblTotalPrice = new javax.swing.JLabel();
        lblNTickets = new javax.swing.JLabel();
        lblTicketPrice = new javax.swing.JLabel();
        btnApply = new javax.swing.JButton();
        lblFlightDate = new javax.swing.JLabel();
        txtFlightDate = new com.toedter.calendar.JDateChooser();
        btnEdit = new javax.swing.JButton();

        setClosable(true);
        setTitle("Reserve Tickets");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Source :");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Destination :");

        btnSearchFlights.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconSearch.png"))); // NOI18N
        btnSearchFlights.setText("Search");
        btnSearchFlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchFlightsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combSource, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearchFlights)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combSource)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(btnSearchFlights)))
                    .addComponent(combDestination))
                .addContainerGap())
        );

        tblFlights.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Flight ID", "Source", "Destination", "Departure Time", "Plane ID", "Model", "Company"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFlights.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFlightsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblFlights);

        txtFlightID.setEditable(false);

        lblDestination.setText("Destination :");

        lblClass.setText("Class :");

        lblFlightID.setText("Flight ID :");

        combClass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Economy", "Business", "First" }));
        combClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combClassItemStateChanged(evt);
            }
        });

        txtDestination.setEditable(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDestination)
                    .addComponent(lblFlightID)
                    .addComponent(lblClass))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combClass, 0, 84, Short.MAX_VALUE)
                    .addComponent(txtFlightID, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                    .addComponent(txtDestination))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFlightID)
                    .addComponent(txtFlightID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDestination)
                    .addComponent(txtDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClass)
                    .addComponent(combClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        lblCustomerID.setText("Customer ID :");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCustomerID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtCustID, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerID)
                    .addComponent(txtCustID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        lblPaymentMethod.setText("Payment Method :");

        btngrpPayment.add(rbCash);
        rbCash.setSelected(true);
        rbCash.setText("Cash");
        rbCash.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbCashMouseClicked(evt);
            }
        });

        btngrpPayment.add(rbCreditCard);
        rbCreditCard.setText("Credit Card");
        rbCreditCard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbCreditCardMouseClicked(evt);
            }
        });

        lblCCNo.setText("Credit Card No :");
        lblCCNo.setToolTipText("CreditCard Number");

        txtCCNo.setToolTipText("(10 Digits)");

        lblCCType.setText("Type :");

        lblCCHolder.setText("Holder :");

        txtCCHolder.setToolTipText("CreditCard Holder Name");

        lblCCBank.setText("Bank :");

        btnCTransaction.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconOK.png"))); // NOI18N
        btnCTransaction.setText("Complete Transaction");
        btnCTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCTransactionActionPerformed(evt);
            }
        });

        combCCType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Master Card", "Visa", "American Express", "Other" }));

        btnPrintTransaction.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconPrint.png"))); // NOI18N
        btnPrintTransaction.setText("Print Transaction");
        btnPrintTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintTransactionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(lblPaymentMethod)
                                .addGap(18, 18, 18)
                                .addComponent(rbCash)
                                .addGap(18, 18, 18)
                                .addComponent(rbCreditCard))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(lblCCNo)
                                .addGap(18, 18, 18)
                                .addComponent(txtCCNo, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblCCType)))
                        .addGap(18, 18, 18)
                        .addComponent(combCCType, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCCHolder)
                        .addGap(18, 18, 18)
                        .addComponent(txtCCHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(lblCCBank)
                        .addGap(18, 18, 18)
                        .addComponent(txtCCBank, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnPrintTransaction)
                        .addGap(18, 18, 18)
                        .addComponent(btnCTransaction)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPaymentMethod)
                    .addComponent(rbCash)
                    .addComponent(rbCreditCard))
                .addGap(23, 23, 23)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCCNo)
                    .addComponent(txtCCNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCCType)
                    .addComponent(lblCCHolder)
                    .addComponent(txtCCHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCCBank)
                    .addComponent(txtCCBank, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combCCType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCTransaction)
                    .addComponent(btnPrintTransaction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        spinNTickets.setModel(new javax.swing.SpinnerNumberModel(1, 1, 5, 1));
        spinNTickets.setOpaque(false);
        spinNTickets.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinNTicketsStateChanged(evt);
            }
        });

        lblticket.setText("Ticket Price (Rs) :");

        lblTotal.setText("Total Price (Rs):");

        lblTotalPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTotalPrice.setText("000000");

        lblNTickets.setText("No.of Tickets :");

        lblTicketPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTicketPrice.setText("000000");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(lblNTickets)
                        .addGap(18, 18, 18)
                        .addComponent(spinNTickets))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTotal)
                            .addComponent(lblticket))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTotalPrice)
                            .addComponent(lblTicketPrice))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNTickets)
                    .addComponent(spinNTickets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblticket)
                    .addComponent(lblTicketPrice))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal)
                    .addComponent(lblTotalPrice))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        btnApply.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconOK.png"))); // NOI18N
        btnApply.setText("Apply");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        lblFlightDate.setText("Flight Date :");

        txtFlightDate.setDateFormatString("dd-MM-yyyy");

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirTicketReservationSystem/IconEdit.png"))); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblFlightDate)
                        .addGap(18, 18, 18)
                        .addComponent(txtFlightDate, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnApply, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFlightDate)
                            .addComponent(txtFlightDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnApply)))
                .addGap(18, 18, 18)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(128, 128, 128))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    public void getSource(){
        String SQL = "select source from source_info";
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            
            while(rs.next()){
                this.combSource.addItem(rs.getString("source"));
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Cannot retrieve source data", "Database error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void getDestination(){
        String SQL = "select destination from destination_info";
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            
            while(rs.next()){
                this.combDestination.addItem(rs.getString("destination"));
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Cannot retrieve destination data", "Database error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void getFlights(String s, String d){
        String SQL = "select f.flightID as 'Flight ID',f.source as 'Source', f.destination as 'Destination', f.dep_time as 'Departure Time', f.planeID as 'Plane ID', p.model as 'Model', p.company as 'Company' from flight_info f, plane_info p where f.planeID=p.planeID and source=? and destination=?";
        try{
            PreparedStatement pst = dbcon.prepareStatement(SQL);
            pst.setString(1, s);
            pst.setString(2, d);
            ResultSet rs = pst.executeQuery();
            this.tblFlights.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Cannot Retrieve Flight Data","Database Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public String generateTicketID(){
        String SQL = "select Ticket from count";
        int nTickets=0;
        String TicketID="";
        String Type = "T";
        
        try{
            Statement stmnt = dbcon.createStatement();
            
            ResultSet rs = stmnt.executeQuery(SQL);
            while(rs.next()){
                    nTickets = rs.getInt("Ticket");
                }
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(null, "Database connection failed while generating TicketID","Database Connection Error",JOptionPane.ERROR_MESSAGE);
        }
        
        if(nTickets<9){
            TicketID=Type.concat("000").concat(Integer.toString(nTickets+1));
        }
        else if(nTickets<99){
            TicketID=Type.concat("00").concat(Integer.toString(nTickets+1));
        }
        else if(nTickets<999){
            TicketID=Type.concat("0").concat(Integer.toString(nTickets+1));
        }
        else if(nTickets<9999){
            TicketID=Type.concat(Integer.toString(nTickets+1));
        }
        else{
            JOptionPane.showMessageDialog(null, "Cannot Generate TicketID. Maximum Tickets Reached","Error",JOptionPane.ERROR_MESSAGE);
        }
        return TicketID;
    }
    
    public void increaseTicketIDByOne(){
        String SQL = "select Ticket from count";
        int nTickets=0;
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            while(rs.next()){
            nTickets = rs.getInt("Ticket");
            }
            
            String SQL2 = "update count set Ticket="+(nTickets+1)+" where Ticket="+nTickets;
            
            try{
                Statement stmnt2 = dbcon.createStatement();
                stmnt.executeUpdate(SQL2);
            }
            catch(Exception ex){
                JOptionPane.showMessageDialog(null, "Database connection failed while saving information","Database Connection Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Database connection failed while saving information","Database Connection Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public String generatePaymentID(){
        String SQL = "select Payment from count";
        int nPayments=0;
        String PaymentID="";
        String Type = "P";
        
        try{
            Statement stmnt = dbcon.createStatement();
            
            ResultSet rs = stmnt.executeQuery(SQL);
            while(rs.next()){
                    nPayments = rs.getInt("Payment");
            }
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(null, "Database connection failed while generating PaymentID","Database Connection Error",JOptionPane.ERROR_MESSAGE);
        }
        
        if(nPayments<9){
            PaymentID=Type.concat("000").concat(Integer.toString(nPayments+1));
        }
        else if(nPayments<99){
            PaymentID=Type.concat("00").concat(Integer.toString(nPayments+1));
        }
        else if(nPayments<999){
            PaymentID=Type.concat("0").concat(Integer.toString(nPayments+1));
        }
        else if(nPayments<9999){
            PaymentID=Type.concat(Integer.toString(nPayments+1));
        }
        else{
            JOptionPane.showMessageDialog(null, "Cannot Generate PaymentID. Maximum Payments Reached","Error",JOptionPane.ERROR_MESSAGE);
        }
        return PaymentID;
    }
    
    public void increasePaymentIDByOne(){
        String SQL = "select Payment from count";
        int nPayment=0;
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            while(rs.next()){
            nPayment = rs.getInt("Payment");
            }
            
            String SQL2 = "update count set Payment="+(nPayment+1)+" where Payment="+nPayment;
            
            try{
                Statement stmnt2 = dbcon.createStatement();
                stmnt.executeUpdate(SQL2);
            }
            catch(Exception ex){
                JOptionPane.showMessageDialog(null, "Database connection failed while saving information","Database Connection Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Database connection failed while saving information","Database Connection Error",JOptionPane.ERROR_MESSAGE);
        }
    }
     
    public void getTicketPrice(){
        int price=0;
            
        String SQL = "select price from flight_info where flightID ='"+this.txtFlightID.getText()+"'";
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            while(rs.next()){
                price = rs.getInt("price");
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Cannot retrieve flight data","Database Error",JOptionPane.ERROR_MESSAGE);
        }
        
        if(this.combClass.getSelectedItem().equals("Economy")){
                int ticketPrice = (int)price+(price*10)/100;
                int nTickets = Integer.parseInt(this.spinNTickets.getValue().toString());
                int totalPrice = ticketPrice*nTickets;
                this.lblTicketPrice.setText(Integer.toString(ticketPrice));
                this.lblTotalPrice.setText(Integer.toString(totalPrice));
        }
        else if(this.combClass.getSelectedItem().equals("Business")){
            int ticketPrice = (int)price+(price*20)/100;
            int nTickets = Integer.parseInt(this.spinNTickets.getValue().toString());
            int totalPrice = ticketPrice*nTickets;
            this.lblTicketPrice.setText(Integer.toString(ticketPrice));
            this.lblTotalPrice.setText(Integer.toString(totalPrice));
        }
        else if(this.combClass.getSelectedItem().equals("First")){
            int ticketPrice = (int)price+(price*30)/100;
            int nTickets = Integer.parseInt(this.spinNTickets.getValue().toString());
            int totalPrice = ticketPrice*nTickets;
            this.lblTicketPrice.setText(Integer.toString(ticketPrice));
            this.lblTotalPrice.setText(Integer.toString(totalPrice));
        }
    }
    
    public boolean cktxtFlightDate(){
        try{
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            String date = df.format(txtFlightDate.getDate());
            if(date.equals("")){
                return false;
            }
            else{
                return true;
            }
        }
        catch(Exception exc){
            return false;
        }
    }
    
    public boolean cktxtCustID(){
        String SQL = "select custID from cust_info";
        try{
            Statement stmnt = dbcon.createStatement();
            ResultSet rs = stmnt.executeQuery(SQL);
            
            boolean found = false;
            
            while(rs.next()){
                if(rs.getString("custID").equals(this.txtCustID.getText())){
                    found = true;
                    break;
                }
            }
            if(found){
                return true;
            }
            else{
                return false;
            } 
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Cannot Retrieve Customer Data","Database Error",JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
    public boolean cktxtCCNo(){
        String CCNo = this.txtCCNo.getText();
        if(CCNo.equals("")){
            this.lblCCNo.setForeground(Color.red);
            this.lblCCNo.setToolTipText("Empty Field!");
            return false;
        }
        else if(CCNo.length()==10){
            for(int x=0; x<CCNo.length(); x++){
                if(!Character.isDigit(CCNo.charAt(x))){
                    this.lblCCNo.setForeground(Color.red);
                    this.lblCCNo.setToolTipText("Invalid Credit Card Number!");
                    return false;
                }
            }
            this.lblCCNo.setForeground(Color.black);
            this.lblCCNo.setToolTipText("CreditCard Number");
            return true;
        }
        else{
            this.lblCCNo.setForeground(Color.red);
            this.lblCCNo.setToolTipText("Invalid Credit Card Number!");
            return false;
        }
    }
    
    public boolean cktxtCCHolder(){
        if(this.txtCCHolder.getText().equals("")){
            this.lblCCHolder.setForeground(Color.red);
            this.lblCCHolder.setToolTipText("Empty Field!");
            return false;
        }
        else if(this.txtCCHolder.getText().length()<45){
            this.lblCCHolder.setForeground(Color.black);
            this.lblCCHolder.setToolTipText("CreditCard Holder Name");
            return true;
        }
        else{
            this.lblCCHolder.setForeground(Color.red);
            this.lblCCHolder.setToolTipText("Maximum Characters Exceeded!");
            return false;
        }
    }
    
    public boolean cktxtCCBank(){
        
        if(this.txtCCBank.getText().equals("")){
            this.lblCCBank.setForeground(Color.red);
            this.lblCCBank.setToolTipText("Empty Field!");
            return false;
        }
        else if(this.txtCCBank.getText().length()<45){
            this.lblCCBank.setForeground(Color.black);
            this.lblCCBank.setToolTipText("CreditCard Bank");
            return true;
        }
        else{
            this.lblCCBank.setForeground(Color.red);
            this.lblCCBank.setToolTipText("Maximum Characters Exceeded!");
            return false;
        }
    }
    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        MDIForm.frmReserveTicketsActive=true;
        this.tblFlights.setEnabled(false);
        this.btnApply.setEnabled(false);
        this.txtFlightID.setEnabled(false);
        this.txtCustID.setEnabled(false);
        this.txtDestination.setEnabled(false);
        this.txtFlightDate.setEnabled(false);
        this.combClass.setEnabled(false);
        this.spinNTickets.setEnabled(false);
        this.btnEdit.setEnabled(false);
        this.lblFlightID.setEnabled(false);
        this.lblDestination.setEnabled(false);
        this.lblCustomerID.setEnabled(false);
        this.lblFlightDate.setEnabled(false);
        this.lblTicketPrice.setEnabled(false);
        this.lblClass.setEnabled(false);
        this.lblNTickets.setEnabled(false);
        this.lblticket.setEnabled(false);
        this.lblTotal.setEnabled(false);
        this.lblTotalPrice.setEnabled(false);
        this.rbCash.setEnabled(false);
        this.rbCreditCard.setEnabled(false);
        this.txtCCNo.setEnabled(false);
        this.combCCType.setEnabled(false);
        this.txtCCHolder.setEnabled(false);
        this.txtCCBank.setEnabled(false);
        this.btnCTransaction.setEnabled(false);
        this.lblPaymentMethod.setEnabled(false);
        this.lblCCBank.setEnabled(false);
        this.lblCCHolder.setEnabled(false);
        this.lblCCNo.setEnabled(false);
        this.lblCCType.setEnabled(false);
        this.btnCTransaction.setEnabled(false);
        this.btnPrintTransaction.setEnabled(false);
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        MDIForm.frmReserveTicketsActive=false;
    }//GEN-LAST:event_formInternalFrameClosing

    private void btnSearchFlightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchFlightsActionPerformed
        
        String source = this.combSource.getSelectedItem().toString();
        String destination = this.combDestination.getSelectedItem().toString();
        getFlights(source,destination);
        this.tblFlights.setEnabled(true);
        this.txtFlightID.setEnabled(false);
        this.txtCustID.setEnabled(false);
        this.txtDestination.setEnabled(false);
        this.txtFlightDate.setEnabled(false);
        this.combClass.setEnabled(false);
        this.btnApply.setEnabled(false);
        this.btnEdit.setEnabled(false);
        this.spinNTickets.setEnabled(false);
        this.lblFlightID.setEnabled(false);
        this.lblDestination.setEnabled(false);
        this.lblCustomerID.setEnabled(false);
        this.lblFlightDate.setEnabled(false);
        this.lblTicketPrice.setEnabled(false);
        this.lblClass.setEnabled(false);
        this.lblNTickets.setEnabled(false);
        this.lblticket.setEnabled(false);
        this.lblTotal.setEnabled(false);
        this.lblTotalPrice.setEnabled(false);
        this.rbCash.setEnabled(false);
        this.rbCreditCard.setEnabled(false);
        this.txtCCNo.setEnabled(false);
        this.combCCType.setEnabled(false);
        this.txtCCHolder.setEnabled(false);
        this.txtCCBank.setEnabled(false);
        this.lblPaymentMethod.setEnabled(false);
        this.lblCCBank.setEnabled(false);
        this.lblCCHolder.setEnabled(false);
        this.lblCCNo.setEnabled(false);
        this.lblCCType.setEnabled(false);
        this.btnCTransaction.setEnabled(false);
        this.btnPrintTransaction.setEnabled(false);
    }//GEN-LAST:event_btnSearchFlightsActionPerformed

    private void tblFlightsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFlightsMouseClicked
        
        if(tblFlights.getModel().getValueAt(0, 0)!=null){
            this.btnApply.setEnabled(true);
            this.txtFlightID.setEnabled(true);
            this.txtCustID.setEnabled(true);
            this.txtDestination.setEnabled(true);
            this.txtFlightDate.setEnabled(true);
            this.combClass.setEnabled(true);
            this.spinNTickets.setEnabled(true);
            this.lblFlightID.setEnabled(true);
            this.lblDestination.setEnabled(true);
            this.lblCustomerID.setEnabled(true);
            this.lblFlightDate.setEnabled(true);
            this.lblTicketPrice.setEnabled(true);
            this.lblClass.setEnabled(true);
            this.lblNTickets.setEnabled(true);
            this.lblticket.setEnabled(true);
            this.lblTotal.setEnabled(true);
            this.lblTotalPrice.setEnabled(true);
            this.btnEdit.setEnabled(false);
            this.rbCash.setEnabled(false);
            this.rbCreditCard.setEnabled(false);
            this.txtCCNo.setEnabled(false);
            this.combCCType.setEnabled(false);
            this.txtCCHolder.setEnabled(false);
            this.txtCCBank.setEnabled(false);
            this.lblPaymentMethod.setEnabled(false);
            this.rbCash.setEnabled(false);
            this.rbCreditCard.setEnabled(false);
            this.lblCCBank.setEnabled(false);
            this.lblCCHolder.setEnabled(false);
            this.lblCCNo.setEnabled(false);
            this.lblCCType.setEnabled(false);
            this.btnCTransaction.setEnabled(false);
            this.btnPrintTransaction.setEnabled(false);
            
            int row = tblFlights.getSelectedRow();
            String selectedFlight = tblFlights.getModel().getValueAt(row, 0).toString();
            String destination = tblFlights.getModel().getValueAt(row, 2).toString();
            this.txtFlightID.setText(selectedFlight);
            this.txtDestination.setText(destination);
            
            getTicketPrice();
        }
        
    }//GEN-LAST:event_tblFlightsMouseClicked

    private void combClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combClassItemStateChanged
        getTicketPrice();
    }//GEN-LAST:event_combClassItemStateChanged

    private void spinNTicketsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinNTicketsStateChanged
        getTicketPrice();
    }//GEN-LAST:event_spinNTicketsStateChanged

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        if(cktxtCustID()==false){
            JOptionPane.showMessageDialog(null,"Invalid Customer ID", "Invalid Inputs", JOptionPane.ERROR_MESSAGE);
        }
        else if(cktxtFlightDate()==false){
            JOptionPane.showMessageDialog(null,"Invalid Flight Date", "Invalid Inputs", JOptionPane.ERROR_MESSAGE);
        }
        else{
            this.btnEdit.setEnabled(true);
            this.txtFlightID.setEnabled(false);
            this.txtCustID.setEnabled(false);
            this.txtDestination.setEnabled(false);
            this.txtFlightDate.setEnabled(false);
            this.combClass.setEnabled(false);
            this.spinNTickets.setEnabled(false);
            this.btnApply.setEnabled(false);
            this.lblFlightID.setEnabled(false);
            this.lblDestination.setEnabled(false);
            this.lblCustomerID.setEnabled(false);
            this.lblFlightDate.setEnabled(false);
            this.lblTicketPrice.setEnabled(false);
            this.lblClass.setEnabled(false);
            this.lblNTickets.setEnabled(false);
            this.lblticket.setEnabled(false);
            this.lblTotal.setEnabled(false);
            this.lblTotalPrice.setEnabled(false);
            this.lblPaymentMethod.setEnabled(true);
            this.rbCash.setEnabled(true);
            this.rbCreditCard.setEnabled(true);
            this.btnCTransaction.setEnabled(true);
            
            if(this.rbCreditCard.isSelected()){
                this.txtCCNo.setEnabled(true);
                this.combCCType.setEnabled(true);
                this.txtCCHolder.setEnabled(true);
                this.txtCCBank.setEnabled(true);
                this.lblCCBank.setEnabled(true);
                this.lblCCHolder.setEnabled(true);
                this.lblCCNo.setEnabled(true);
                this.lblCCType.setEnabled(true);
            }
            else{
                this.txtCCNo.setEnabled(false);
                this.combCCType.setEnabled(false);
                this.txtCCHolder.setEnabled(false);
                this.txtCCBank.setEnabled(false);
                this.lblCCBank.setEnabled(false);
                this.lblCCHolder.setEnabled(false);
                this.lblCCNo.setEnabled(false);
                this.lblCCType.setEnabled(false);
            }
        }
    }//GEN-LAST:event_btnApplyActionPerformed

    private void rbCashMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbCashMouseClicked
        this.txtCCNo.setEnabled(false);
        this.combCCType.setEnabled(false);
        this.txtCCHolder.setEnabled(false);
        this.txtCCBank.setEnabled(false);
        this.lblCCBank.setEnabled(false);
        this.lblCCHolder.setEnabled(false);
        this.lblCCNo.setEnabled(false);
        this.lblCCType.setEnabled(false);
    }//GEN-LAST:event_rbCashMouseClicked

    private void rbCreditCardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbCreditCardMouseClicked
        this.txtCCNo.setEnabled(true);
        this.combCCType.setEnabled(true);
        this.txtCCHolder.setEnabled(true);
        this.txtCCBank.setEnabled(true);
        this.lblCCBank.setEnabled(true);
        this.lblCCHolder.setEnabled(true);
        this.lblCCNo.setEnabled(true);
        this.lblCCType.setEnabled(true);
    }//GEN-LAST:event_rbCreditCardMouseClicked

    private void btnCTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCTransactionActionPerformed
        if(this.rbCreditCard.isSelected()){
            if(cktxtCCNo() & cktxtCCHolder() & cktxtCCBank()){
                int userChoice = JOptionPane.showConfirmDialog(null,"Are you sure details are correct?", "Confirm Details", JOptionPane.YES_NO_OPTION);

                if(userChoice==0){
                    //Adding payment info to database
                    String save_payment_info_SQL = "insert into payment_info values(?,?,?,?)";
                    String save_ticket_info_SQL = "insert into ticket_info values(?,?,?,?,?,?,?)";
                    String save_creditcard_info_SQL = "insert into creditcard_info values(?,?,?,?,?)";
                    paymentID = generatePaymentID();
                    
                    
                    try{
                        PreparedStatement pst = dbcon.prepareStatement(save_payment_info_SQL);
                        PreparedStatement pst2 = dbcon.prepareStatement(save_creditcard_info_SQL);
                        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
                        Date date = new Date();
                        String d = dateFormat.format(date);
                        pst.setString(1, paymentID);
                        pst.setString(2, "CreditCard");
                        pst.setString(3, this.lblTotalPrice.getText());
                        pst.setString(4, d);
                        pst.executeUpdate();
                        
                        pst2.setString(1, paymentID);
                        pst2.setString(2, this.txtCCNo.getText());
                        pst2.setString(3, this.combCCType.getSelectedItem().toString());
                        pst2.setString(4, this.txtCCHolder.getText());
                        pst2.setString(5, this.txtCCBank.getText());
                        pst2.executeUpdate();
                        increasePaymentIDByOne();  
                    }
                    catch(Exception exc){
                        JOptionPane.showMessageDialog(null, "Database connection failed while saving information","Database Connection Error",JOptionPane.ERROR_MESSAGE);
                    } 
                    int ntickets=Integer.parseInt(this.spinNTickets.getValue().toString());
                    //Adding tickets to the database
                    try{
                        PreparedStatement pst = dbcon.prepareStatement(save_ticket_info_SQL);

                        while(ntickets>0){
                            pst.setString(1, generateTicketID());
                            pst.setString(2, this.txtFlightID.getText());
                            pst.setString(3, this.txtCustID.getText());
                            pst.setString(4, this.combClass.getSelectedItem().toString());
                            pst.setString(5, this.lblTicketPrice.getText());
                            pst.setString(6, paymentID);
                            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                            String date = df.format(txtFlightDate.getDate());
                            pst.setString(7, date);
                            pst.executeUpdate();
                            increaseTicketIDByOne();
                            ntickets--;
                        }
                        JOptionPane.showMessageDialog(null, "Transaction Completed.","Trasnsaction Successful.",JOptionPane.INFORMATION_MESSAGE);
                        //------------------------------------
                        this.btnPrintTransaction.setEnabled(true);
                        this.btnCTransaction.setEnabled(false);
                        this.btnEdit.setEnabled(false);
                        this.rbCash.setEnabled(false);
                        this.rbCreditCard.setEnabled(false);
                        this.txtCCNo.setEnabled(false);
                        this.combCCType.setEnabled(false);
                        this.txtCCHolder.setEnabled(false);
                        this.txtCCBank.setEnabled(false);
                        this.lblPaymentMethod.setEnabled(false);
                        this.lblCCBank.setEnabled(false);
                        this.lblCCHolder.setEnabled(false);
                        this.lblCCType.setEnabled(false);
                        this.lblCCNo.setEnabled(false);
                        this.btnCTransaction.setEnabled(false);
                        //------------------------------------
                    }
                    catch(Exception exc){
                        exc.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Database connection failed while adding tickets","Database Connection Error",JOptionPane.ERROR_MESSAGE);
                    }   
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Incorrect CreditCard Information","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(this.rbCash.isSelected()){
            int userChoice = JOptionPane.showConfirmDialog(null,"Are you sure details are correct?", "Confirm Details", JOptionPane.YES_NO_OPTION);

            if(userChoice==0){
                //Adding payment info to database
                String save_payment_info_SQL = "insert into payment_info values(?,?,?,?)";
                String save_ticket_info_SQL = "insert into ticket_info values(?,?,?,?,?,?,?)";
                paymentID = generatePaymentID();
                increasePaymentIDByOne();
                try{
                    PreparedStatement pst = dbcon.prepareStatement(save_payment_info_SQL);

                    pst.setString(1, paymentID);
                    pst.setString(2, "Cash");
                    pst.setString(3, this.lblTotalPrice.getText());
                    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
                    Date date = new Date();
                    String d = dateFormat.format(date);
                    pst.setString(4, d);
                    pst.executeUpdate();
                }
                catch(Exception exc){
                    JOptionPane.showMessageDialog(null, "Database connection failed while saving information","Database Connection Error",JOptionPane.ERROR_MESSAGE);
                }

                int ntickets=Integer.parseInt(this.spinNTickets.getValue().toString());
                //Adding tickets to the database
                try{
                    PreparedStatement pst = dbcon.prepareStatement(save_ticket_info_SQL);
                    while(ntickets>0){
                        pst.setString(1, generateTicketID());
                        pst.setString(2, this.txtFlightID.getText());
                        pst.setString(3, this.txtCustID.getText());
                        pst.setString(4, this.combClass.getSelectedItem().toString());
                        pst.setString(5, this.lblTicketPrice.getText());
                        pst.setString(6, paymentID);
                        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                        String date = df.format(txtFlightDate.getDate());
                        pst.setString(7, date);
                        pst.executeUpdate();
                        increaseTicketIDByOne();
                        ntickets--;
                    }
                    JOptionPane.showMessageDialog(null, "Transaction Completed. ","Trasnsaction Successful.",JOptionPane.INFORMATION_MESSAGE);
                    //-------------------------------------------
                    this.btnPrintTransaction.setEnabled(true);
                    this.btnCTransaction.setEnabled(false);
                    this.btnEdit.setEnabled(false);
                    this.rbCash.setEnabled(false);
                    this.rbCreditCard.setEnabled(false);
                    //--------------------------------------------    
                }
                catch(Exception exc){
                    exc.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database connection failed while saving information","Database Connection Error",JOptionPane.ERROR_MESSAGE);
                }   
            }
        }
    }//GEN-LAST:event_btnCTransactionActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        this.btnEdit.setEnabled(false);
        this.txtFlightID.setEnabled(true);
        this.txtCustID.setEnabled(true);
        this.txtDestination.setEnabled(true);
        this.txtFlightDate.setEnabled(true);
        this.combClass.setEnabled(true);
        this.spinNTickets.setEnabled(true);
        this.btnApply.setEnabled(true);
        this.lblFlightID.setEnabled(true);
        this.lblDestination.setEnabled(true);
        this.lblCustomerID.setEnabled(true);
        this.lblFlightDate.setEnabled(true);
        this.lblTicketPrice.setEnabled(true);
        this.lblClass.setEnabled(true);
        this.lblNTickets.setEnabled(true);
        this.lblticket.setEnabled(true);
        this.lblTotal.setEnabled(true);
        this.lblTotalPrice.setEnabled(true);
        this.rbCash.setEnabled(false);
        this.rbCreditCard.setEnabled(false);
        this.txtCCNo.setEnabled(false);
        this.combCCType.setEnabled(false);
        this.txtCCHolder.setEnabled(false);
        this.txtCCBank.setEnabled(false);
        this.lblPaymentMethod.setEnabled(false);
        this.rbCash.setEnabled(false);
        this.rbCreditCard.setEnabled(false);
        this.rbCash.setSelected(false);
        this.lblCCBank.setEnabled(false);
        this.lblCCHolder.setEnabled(false);
        this.lblCCNo.setEnabled(false);
        this.lblCCType.setEnabled(false);
        this.btnCTransaction.setEnabled(false);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnPrintTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintTransactionActionPerformed
        try {
            JasperDesign jd = JRXmlLoader.load("reports\\paymentReport_All.jrxml");
            String sql = "select p.paymentID as 'Payment ID', p.method as 'Payment Method', p.payAmnt as 'Amount', p.date as 'Payment Date', t.ticketID as 'Ticket ID', t.custID as 'Customer ID', t.flightID as 'Flight ID' from payment_info p left outer join creditcard_info c on p.paymentID=c.paymentID, ticket_info t where t.paymentID=p.paymentID and p.paymentID='"+paymentID+"'";
            JRDesignQuery newQuery = new JRDesignQuery();
            newQuery.setText(sql);
            jd.setQuery(newQuery);
            JasperReport jr = JasperCompileManager.compileReport(jd);
            JasperPrint jp = JasperFillManager.fillReport(jr, null,dbcon);
            JasperViewer.viewReport(jp,false);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error occured while generating transaction report.","Error Occured",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnPrintTransactionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnCTransaction;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnPrintTransaction;
    private javax.swing.JButton btnSearchFlights;
    private javax.swing.ButtonGroup btngrpPayment;
    private javax.swing.JComboBox<String> combCCType;
    private javax.swing.JComboBox<String> combClass;
    private javax.swing.JComboBox<String> combDestination;
    private javax.swing.JComboBox<String> combSource;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCCBank;
    private javax.swing.JLabel lblCCHolder;
    private javax.swing.JLabel lblCCNo;
    private javax.swing.JLabel lblCCType;
    private javax.swing.JLabel lblClass;
    private javax.swing.JLabel lblCustomerID;
    private javax.swing.JLabel lblDestination;
    private javax.swing.JLabel lblFlightDate;
    private javax.swing.JLabel lblFlightID;
    private javax.swing.JLabel lblNTickets;
    private javax.swing.JLabel lblPaymentMethod;
    private javax.swing.JLabel lblTicketPrice;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTotalPrice;
    private javax.swing.JLabel lblticket;
    private javax.swing.JRadioButton rbCash;
    private javax.swing.JRadioButton rbCreditCard;
    private javax.swing.JSpinner spinNTickets;
    private javax.swing.JTable tblFlights;
    private javax.swing.JTextField txtCCBank;
    private javax.swing.JTextField txtCCHolder;
    private javax.swing.JTextField txtCCNo;
    private javax.swing.JTextField txtCustID;
    private javax.swing.JTextField txtDestination;
    private com.toedter.calendar.JDateChooser txtFlightDate;
    private javax.swing.JTextField txtFlightID;
    // End of variables declaration//GEN-END:variables
}
